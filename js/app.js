// js/app.js - Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î°úÏßÅ

console.log('app.js Î°úÎî© ÏãúÏûë');

class PersonalColorAnalyzer {
    constructor() {
        console.log('PersonalColorAnalyzer ÏÉùÏÑ±Ïûê Ïã§Ìñâ');
        
        // ÏÉÅÌÉú Í¥ÄÎ¶¨
        this.currentStep = 0;
        this.analysisMode = null;
        this.analysisData = null;
        this.uploadedImage = null;
        this.selectedFeatures = { skinTone: null };
        this.drapingResults = { 
            temperature: null, 
            brightness: null, 
            saturation: null,
            selectedColor: null 
        };
        this.currentDrapingStep = 'temperature';
        this.fullscreenMode = false;
        this.fullscreenColor = null;
        this.expandedSections = {};
        this.showManual = false;
        this.drapingTimer = 0;
        this.timerInterval = null;

        // DOM ÏöîÏÜåÎì§ Ï∫êÏãú
        this.elements = {};
        
        // Ï¥àÍ∏∞Ìôî
        this.init();
    }

    init() {
        console.log('Ïï± Ï¥àÍ∏∞Ìôî ÏãúÏûë');
        
        // DOMÏù¥ Î°úÎìúÎêú ÌõÑ Ïã§Ìñâ
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeApp());
        } else {
            this.initializeApp();
        }
    }

    initializeApp() {
        console.log('Ïï± Ï¥àÍ∏∞Ìôî Ïã§Ìñâ');
        
        try {
            this.cacheElements();
            this.setupEventListeners();
            this.hideLoading();
            this.showStep(0);
            console.log('Ïï± Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        } catch (error) {
            console.error('Ïï± Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò:', error);
            this.showError('Ïï±ÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    }

    cacheElements() {
        console.log('DOM ÏöîÏÜå Ï∫êÏãú Ï§ë');
        
        // Í∏∞Î≥∏ ÏöîÏÜåÎì§
        this.elements = {
            loading: document.getElementById('loading'),
            app: document.getElementById('app'),
            manualBtn: document.getElementById('manual-btn'),
            steps: document.querySelectorAll('.step-content'),
            expertManualModal: document.getElementById('expert-manual-modal'),
            fullscreenModal: document.getElementById('fullscreen-modal')
        };

        // ÌïÑÏàò ÏöîÏÜå ÌôïÏù∏
        if (!this.elements.loading || !this.elements.app) {
            throw new Error('ÌïÑÏàò DOM ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        }

        console.log('DOM ÏöîÏÜå Ï∫êÏãú ÏôÑÎ£å');
    }

    setupEventListeners() {
        console.log('Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Ï§ë');
        
        // Îß§Îâ¥Ïñº Î≤ÑÌäº
        if (this.elements.manualBtn) {
            this.elements.manualBtn.addEventListener('click', () => this.toggleManual());
        }
        
        // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (this.fullscreenMode) {
                    this.exitFullscreen();
                } else if (this.showManual) {
                    this.toggleManual();
                }
            }
        });

        // Ï†ÑÏó≠ Ìï®ÏàòÎì§ÏùÑ windowÏóê Îì±Î°ù (Í∏∞Ï°¥ HTMLÍ≥º Ìò∏ÌôòÏÑ±)
        this.registerGlobalFunctions();

        console.log('Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
    }

    registerGlobalFunctions() {
        console.log('Ï†ÑÏó≠ Ìï®Ïàò Îì±Î°ù Ï§ë');
        
        // Í∏∞Ï°¥ HTMLÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Ìï®ÏàòÎì§ÏùÑ Ï†ÑÏó≠ÏúºÎ°ú Îì±Î°ù
        window.selectMode = (mode) => this.selectAnalysisMode(mode);
        window.goBack = () => this.goBack();
        window.selectColor = (temperature, colorName) => this.handleColorSelection(temperature, colorName);
        window.resetApp = () => this.resetAll();
        window.enterFullscreen = (color) => this.enterFullscreen(color);
        window.exitFullscreen = () => this.exitFullscreen();
        window.showExpertManual = () => this.showExpertManual();
        window.hideExpertManual = () => this.hideExpertManual();

        console.log('Ï†ÑÏó≠ Ìï®Ïàò Îì±Î°ù ÏôÑÎ£å');
    }

    showError(message) {
        console.error('Ïò§Î•ò ÌëúÏãú:', message);
        alert(message);
    }

    hideLoading() {
        console.log('Î°úÎî© ÌôîÎ©¥ Ïà®ÍπÄ');
        
        if (this.elements.loading && this.elements.app) {
            this.elements.loading.style.display = 'none';
            this.elements.app.style.display = 'block';
        }
    }

    showStep(stepNumber) {
        console.log('Îã®Í≥Ñ ÌëúÏãú:', stepNumber);
        
        try {
            // Î™®Îì† Îã®Í≥Ñ Ïà®Í∏∞Í∏∞
            if (this.elements.steps) {
                this.elements.steps.forEach(step => {
                    step.style.display = 'none';
                });
            }

            // ÌòÑÏû¨ Îã®Í≥Ñ ÌëúÏãú
            const currentStepElement = document.getElementById(`step-${stepNumber}`);
            if (currentStepElement) {
                currentStepElement.style.display = 'block';
                currentStepElement.classList.add('fade-in-up');
            }

            this.currentStep = stepNumber;
            console.log('ÌòÑÏû¨ Îã®Í≥Ñ:', stepNumber);
        } catch (error) {
            console.error('Îã®Í≥Ñ ÌëúÏãú Ï§ë Ïò§Î•ò:', error);
        }
    }

    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î©îÏÑúÎìúÎì§
    selectAnalysisMode(mode) {
        console.log('Î∂ÑÏÑù Î™®Îìú ÏÑ†ÌÉù:', mode);
        
        this.analysisMode = mode;
        if (mode === 'photo') {
            this.showStep(1);
            this.setupPhotoUpload();
        } else if (mode === 'expert') {
            this.showStep(2);
            this.startExpertAnalysis();
        }
    }

    goBack() {
        console.log('Îí§Î°úÍ∞ÄÍ∏∞, ÌòÑÏû¨ Îã®Í≥Ñ:', this.currentStep);
        
        if (this.currentStep === 1) {
            this.currentStep = 0;
            this.analysisMode = null;
            this.showStep(0);
        } else if (this.currentStep === 2) {
            if (this.analysisMode === 'photo') {
                this.currentStep = 1;
                this.uploadedImage = null;
                this.showStep(1);
            } else {
                this.currentStep = 0;
                this.analysisMode = null;
                this.showStep(0);
            }
            this.resetDrapingResults();
        } else if (this.currentStep === 3) {
            this.currentStep = 2;
            this.analysisData = null;
            this.showStep(2);
        }
    }

    resetDrapingResults() {
        console.log('ÎìúÎûòÏù¥Ìïë Í≤∞Í≥º Ï¥àÍ∏∞Ìôî');
        
        this.drapingResults = { 
            temperature: null, 
            brightness: null, 
            saturation: null,
            selectedColor: null 
        };
        this.currentDrapingStep = 'temperature';
    }

    resetAll() {
        console.log('Ïï± Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî');
        
        this.currentStep = 0;
        this.analysisMode = null;
        this.analysisData = null;
        this.uploadedImage = null;
        this.selectedFeatures = { skinTone: null };
        this.resetDrapingResults();
        this.expandedSections = {};
        this.showManual = false;
        this.showStep(0);
    }

    // ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú Í¥ÄÎ†®
    setupPhotoUpload() {
        console.log('ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú ÏÑ§Ï†ï');
        
        const input = document.getElementById('photo-input');
        if (input) {
            // Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
            const newInput = input.cloneNode(true);
            input.parentNode.replaceChild(newInput, input);
            
            // ÏÉà Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
            newInput.addEventListener('change', (e) => this.handleImageUpload(e));
        }
    }

    handleImageUpload(event) {
        console.log('Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ï≤òÎ¶¨');
        
        const file = event.target.files[0];
        if (file) {
            console.log('ÌååÏùº ÏÑ†ÌÉùÎê®:', file.name);
            
            const reader = new FileReader();
            reader.onload = (e) => {
                this.uploadedImage = e.target.result;
                this.showStep(2);
                this.startPhotoAnalysis();
            };
            reader.readAsDataURL(file);
        }
    }

    startPhotoAnalysis() {
        console.log('ÏÇ¨ÏßÑ Î∂ÑÏÑù ÏãúÏûë');
        
        const step2Element = document.getElementById('step-2');
        if (step2Element) {
            step2Element.innerHTML = `
                <div class="text-center mb-8">
                    <button onclick="goBack()" class="float-left text-gray-600 hover:text-gray-800 flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        Îí§Î°úÍ∞ÄÍ∏∞
                    </button>
                    <h2 class="text-3xl font-bold mb-4">üîç AI ÏÉâÏÉÅ Î∂ÑÏÑù</h2>
                </div>
                
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div class="text-center">
                        <img src="${this.uploadedImage}" alt="Î∂ÑÏÑùÌï† ÏÇ¨ÏßÑ" class="max-w-full h-64 object-cover rounded-lg mx-auto shadow-md">
                    </div>
                    
                    <div class="space-y-6">
                        <div class="bg-orange-50 rounded-lg p-6">
                            <h3 class="text-xl font-bold mb-4">ÌîºÎ∂Ä Í∏∞Î≥∏ ÌÜ§</h3>
                            <div class="space-y-3">
                                ${this.renderSkinToneOptions()}
                            </div>
                        </div>

                        <button id="analyze-btn" onclick="app.runPhotoAnalysis()" 
                                class="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-xl font-bold text-xl hover:from-purple-600 hover:to-pink-600 transition-all disabled:opacity-50"
                                disabled>
                            üî¨ AI Î∂ÑÏÑù ÏãúÏûë
                        </button>
                    </div>
                </div>
            `;
            
            this.setupSkinToneSelection();
        }
    }

    renderSkinToneOptions() {
        const options = [
            { key: 'warm', label: 'üî• Îî∞ÎúªÌïú ÌÜ§', desc: 'Ìô©ÏÉâ/Í≥®Îì† Ïñ∏ÎçîÌÜ§' },
            { key: 'neutral', label: '‚ö™ Ï§ëÏÑ± ÌÜ§', desc: 'Í∑†ÌòïÏû°Ìûå Ïñ∏ÎçîÌÜ§' },
            { key: 'cool', label: '‚ùÑÔ∏è Ï∞®Í∞ÄÏö¥ ÌÜ§', desc: 'ÌïëÌÅ¨/Î∏îÎ£® Ïñ∏ÎçîÌÜ§' }
        ];

        return options.map(option => `
            <button class="skin-tone-option w-full p-4 rounded-lg border-2 text-left transition-all border-gray-200 bg-white hover:border-gray-300" 
                    data-tone="${option.key}">
                <div class="font-semibold">${option.label}</div>
                <div class="text-sm text-gray-600">${option.desc}</div>
            </button>
        `).join('');
    }

    setupSkinToneSelection() {
        console.log('ÌîºÎ∂ÄÌÜ§ ÏÑ†ÌÉù ÏÑ§Ï†ï');
        
        document.querySelectorAll('.skin-tone-option').forEach(btn => {
            btn.addEventListener('click', () => {
                const tone = btn.dataset.tone;
                this.selectedFeatures.skinTone = tone;
                this.updateSkinToneSelection();
                this.updateAnalyzeButton();
            });
        });
    }

    updateSkinToneSelection() {
        document.querySelectorAll('.skin-tone-option').forEach(btn => {
            const tone = btn.dataset.tone;
            if (tone === this.selectedFeatures.skinTone) {
                btn.className = 'skin-tone-option w-full p-4 rounded-lg border-2 text-left transition-all border-orange-500 bg-orange-100';
            } else {
                btn.className = 'skin-tone-option w-full p-4 rounded-lg border-2 text-left transition-all border-gray-200 bg-white hover:border-gray-300';
            }
        });
    }

    updateAnalyzeButton() {
        const analyzeBtn = document.getElementById('analyze-btn');
        if (analyzeBtn) {
            analyzeBtn.disabled = !this.selectedFeatures.skinTone;
        }
    }

    runPhotoAnalysis() {
        console.log('ÏÇ¨ÏßÑ Î∂ÑÏÑù Ïã§Ìñâ');
        
        const season = this.determineSeason(this.selectedFeatures);
        const analysis = {
            season,
            confidence: 85,
            method: 'photo-based',
            characteristics: 'Î∞ùÍ≥† Îî∞ÎúªÌïú ÌÜ§, Î∂ÄÎìúÎü¨Ïö¥ Ï±ÑÎèÑ',
            recommendations: {
                makeup: 'ÏΩîÎûÑ ÌïëÌÅ¨ Î¶ΩÏä§Ìã±, Î≥µÏà≠ÏïÑ Î∏îÎü¨ÏÖî',
                hair: 'Îî∞ÎúªÌïú Í≥®Îì† Î∏îÎ°†Îìú',
                clothing: 'ÏïÑÏù¥Î≥¥Î¶¨, ÏΩîÎûÑ, Îî∞ÎúªÌïú ÌïëÌÅ¨'
            }
        };
        
        this.analysisData = analysis;
        this.showStep(3);
        this.renderResults();
    }

    determineSeason(features) {
        // Í∞ÑÎã®Ìïú Í∑úÏπô Í∏∞Î∞ò Î∂ÑÎ•ò
        if (features.skinTone === 'warm') {
            return 'Spring Light';
        } else if (features.skinTone === 'cool') {
            return 'Summer Light';
        } else {
            return 'Autumn Soft';
        }
    }

    // Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù ÏãúÏûë
    startExpertAnalysis() {
        console.log('Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù ÏãúÏûë');
        
        // Í∏∞Ï°¥ HTMLÏùò Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù ÎÇ¥Ïö©ÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
        // (Ïù¥ÎØ∏ HTMLÏóê Íµ¨ÌòÑÎêòÏñ¥ ÏûàÏúºÎØÄÎ°ú Î≥ÑÎèÑ Ï≤òÎ¶¨ Î∂àÌïÑÏöî)
    }

    handleColorSelection(temperature, colorName) {
        console.log('ÏÉâÏÉÅ ÏÑ†ÌÉù:', temperature, colorName);
        
        // Í∞ÑÎã®Ìïú Ïï†ÎãàÎ©îÏù¥ÏÖò
        const selectedCard = event.target.closest('.color-card') || event.target;
        if (selectedCard) {
            selectedCard.style.transform = 'scale(1.05)';
            selectedCard.style.borderColor = temperature === 'warm' ? '#f97316' : '#3b82f6';
        }
        
        setTimeout(() => {
            this.showStep(3);
            this.renderExpertResults(temperature);
        }, 1000);
    }

    renderExpertResults(temperature) {
        console.log('Ï†ÑÎ¨∏Í∞Ä Í≤∞Í≥º Î†åÎçîÎßÅ:', temperature);
        
        const season = temperature === 'warm' ? 'Spring Light' : 'Summer Light';
        const analysis = {
            season,
            confidence: 92,
            method: 'professional-draping',
            characteristics: temperature === 'warm' ? 'Î∞ùÍ≥† Îî∞ÎúªÌïú ÌÜ§, Î∂ÄÎìúÎü¨Ïö¥ Ï±ÑÎèÑ' : 'Î∞ùÍ≥† Ï∞®Í∞ÄÏö¥ ÌÜ§, Ïö∞ÏïÑÌïú ÏÉâÍ∞ê',
            drapingAnalysis: { temperature },
            recommendations: {
                makeup: 'Ï†ÑÎ¨∏Í∞Ä Ï∂îÏ≤ú Î©îÏù¥ÌÅ¨ÏóÖ',
                hair: 'ÏµúÏ†Å Ìó§Ïñ¥ Ïª¨Îü¨',
                clothing: 'Î≤†Ïä§Ìä∏ ÏùòÏÉÅ Ïª¨Îü¨'
            }
        };
        
        this.analysisData = analysis;
        this.renderResults();
    }

    renderResults() {
        console.log('Í≤∞Í≥º Î†åÎçîÎßÅ');
        
        const step3Element = document.getElementById('step-3');
        if (step3Element && this.analysisData) {
            // Í∏∞Ï°¥ Í≤∞Í≥º ÌôîÎ©¥ ÏÇ¨Ïö©ÌïòÎêò ÎèôÏ†Å Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            const seasonElement = document.getElementById('result-season');
            const descElement = document.getElementById('result-description');
            
            if (seasonElement) seasonElement.textContent = this.analysisData.season;
            if (descElement) descElement.textContent = this.analysisData.characteristics;
        }
    }

    // Ï†ÑÎ¨∏Í∞Ä Îß§Îâ¥Ïñº Í¥ÄÎ†®
    toggleManual() {
        console.log('Îß§Îâ¥Ïñº ÌÜ†Í∏Ä');
        
        this.showManual = !this.showManual;
        if (this.showManual) {
            this.showExpertManual();
        } else {
            this.hideExpertManual();
        }
    }

    showExpertManual() {
        console.log('Ï†ÑÎ¨∏Í∞Ä Îß§Îâ¥Ïñº ÌëúÏãú');
        
        if (this.elements.expertManualModal) {
            // HTMLÏóê Ïù¥ÎØ∏ Íµ¨ÌòÑÎêú Îß§Îâ¥Ïñº ÏÇ¨Ïö©
            window.showExpertManual();
        }
    }

    hideExpertManual() {
        console.log('Ï†ÑÎ¨∏Í∞Ä Îß§Îâ¥Ïñº Ïà®ÍπÄ');
        
        if (this.elements.expertManualModal) {
            window.hideExpertManual();
        }
        this.showManual = false;
    }

    // Ï†ÑÏ≤¥ÌôîÎ©¥ ÎìúÎûòÏù¥Ìïë Í¥ÄÎ†®
    enterFullscreen(color) {
        console.log('Ï†ÑÏ≤¥ÌôîÎ©¥ ÏßÑÏûÖ:', color.name);
        
        this.fullscreenColor = color;
        this.fullscreenMode = true;
        this.startDrapingTimer();
        
        // HTMLÏùò Ï†ÑÏ≤¥ÌôîÎ©¥ Ìï®Ïàò Ìò∏Ï∂ú
        if (window.enterFullscreen) {
            window.enterFullscreen(color);
        }
    }

    exitFullscreen() {
        console.log('Ï†ÑÏ≤¥ÌôîÎ©¥ Ï¢ÖÎ£å');
        
        this.fullscreenMode = false;
        this.fullscreenColor = null;
        this.stopDrapingTimer();
        
        // HTMLÏùò Ï†ÑÏ≤¥ÌôîÎ©¥ Ï¢ÖÎ£å Ìï®Ïàò Ìò∏Ï∂ú
        if (window.exitFullscreen) {
            window.exitFullscreen();
        }
    }

    startDrapingTimer() {
        console.log('ÎìúÎûòÏù¥Ìïë ÌÉÄÏù¥Î®∏ ÏãúÏûë');
        
        this.drapingTimer = 0;
        this.timerInterval = setInterval(() => {
            this.drapingTimer += 0.1;
            this.updateTimerDisplay();
        }, 100);
    }

    stopDrapingTimer() {
        console.log('ÎìúÎûòÏù¥Ìïë ÌÉÄÏù¥Î®∏ Ï†ïÏßÄ');
        
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    updateTimerDisplay() {
        const timerElement = document.getElementById('draping-timer');
        if (timerElement && this.fullscreenMode) {
            timerElement.textContent = `Í¥ÄÏ∞∞ ÏãúÍ∞Ñ: ${this.drapingTimer.toFixed(1)}Ï¥à`;
            
            // 3Ï¥à Ïù¥ÏÉÅÏùº Îïå ÏÉâÏÉÅ Î≥ÄÍ≤Ω
            if (this.drapingTimer >= 3) {
                timerElement.className = 'text-sm font-mono text-green-400';
            }
        }
    }

    // Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
    log(message, data = null) {
        console.log(`[PersonalColorAnalyzer] ${message}`, data || '');
    }

    error(message, error = null) {
        console.error(`[PersonalColorAnalyzer] ${message}`, error || '');
    }
}

// Ï†ÑÏó≠ Ïï± Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
let app;

// DOM Î°úÎìú ÏôÑÎ£å ÌõÑ Ïï± Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Î°úÎìú ÏôÑÎ£å - app.jsÏóêÏÑú Ïï± Ï¥àÍ∏∞Ìôî');
    try {
        app = new PersonalColorAnalyzer();
        window.app = app; // ÎîîÎ≤ÑÍπÖÏö© Ï†ÑÏó≠ Ï†ëÍ∑º
        console.log('Ïï± Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å');
    } catch (error) {
        console.error('Ïï± Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
        alert('Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.');
    }
});

// Ï†ÑÏó≠ Ïò§Î•ò Ìï∏Îì§Îü¨
window.addEventListener('error', function(e) {
    console.error('Ï†ÑÏó≠ JavaScript Ïò§Î•ò:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Promise Í±∞Î∂Ä:', e.reason);
});

console.log('app.js Î°úÎî© ÏôÑÎ£å');
