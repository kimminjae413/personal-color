/**
 * Personal Color Pro - Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïª®Ìä∏Î°§Îü¨
 * Ìó§Ïñ¥ÎîîÏûêÏù¥ÎÑàÏö© ÌçºÏä§ÎÑêÏª¨Îü¨ ÏßÑÎã® ÌÉúÎ∏îÎ¶ø ÏõπÏï±
 */

class PersonalColorApp {
    constructor() {
        this.currentCustomer = null;
        this.currentMode = 'photo';
        this.diagnosisData = null;
        this.isInitialized = false;
        this.components = {};
        
        // Î°úÎî© ÏßÑÌñâÎ•†
        this.loadingSteps = [
            'AI Î™®Îç∏ Î°úÎî©',
            'ÏÉâÏÉÅ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî',
            'Ïπ¥Î©îÎùº ÏãúÏä§ÌÖú Ï§ÄÎπÑ',
            'ÎìúÎ†àÏù¥Ìïë ÏóîÏßÑ Ï¥àÍ∏∞Ìôî',
            'ÏÇ¨Ïö©Ïûê Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï§ÄÎπÑ'
        ];
        this.currentLoadingStep = 0;
        
        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Î∞îÏù∏Îî©
        this.init();
    }

    /**
     * Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî
     */
    async init() {
        try {
            console.log('üé® Personal Color Pro ÏãúÏûë...');
            
            // DOMÏù¥ Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.startInitialization());
            } else {
                await this.startInitialization();
            }
        } catch (error) {
            console.error('‚ùå Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
            this.showError('ÏãúÏä§ÌÖú Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.');
        }
    }

    /**
     * Ï¥àÍ∏∞Ìôî ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë
     */
    async startInitialization() {
        try {
            // Î°úÎî© UI ÏóÖÎç∞Ïù¥Ìä∏
            this.updateLoadingProgress(0, this.loadingSteps[0]);
            
            // 1. ÏÑ§Ï†ï Î∞è ÏÉÅÏàò Î°úÎìú
            await this.loadConfiguration();
            this.updateLoadingProgress(20, this.loadingSteps[1]);
            
            // 2. ÌïµÏã¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
            await this.initializeCoresystems();
            this.updateLoadingProgress(40, this.loadingSteps[2]);
            
            // 3. AI Î™®Îç∏ Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            await this.loadAIModelsAndData();
            this.updateLoadingProgress(60, this.loadingSteps[3]);
            
            // 4. Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî
            await this.initializeComponents();
            this.updateLoadingProgress(80, this.loadingSteps[4]);
            
            // 5. Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
            this.setupEventListeners();
            this.updateLoadingProgress(90, 'ÎßàÎ¨¥Î¶¨ Ï§ë...');
            
            // 6. Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
            await this.setInitialState();
            this.updateLoadingProgress(100, 'ÏôÑÎ£å!');
            
            // Î°úÎî© ÏôÑÎ£å ÌõÑ Î©îÏù∏ Ïï± ÌëúÏãú
            setTimeout(() => {
                this.hideLoadingScreen();
                this.showMainApp();
                this.isInitialized = true;
                console.log('‚úÖ Personal Color Pro Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!');
            }, 500);
            
        } catch (error) {
            console.error('‚ùå Ï¥àÍ∏∞Ìôî ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®:', error);
            this.showError('ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
        }
    }

    /**
     * ÏÑ§Ï†ï Î∞è ÏÉÅÏàò Î°úÎìú
     */
    async loadConfiguration() {
        return new Promise((resolve) => {
            // ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞Í∞Ä Ïù¥ÎØ∏ Î°úÎìúÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            if (window.PersonalColorConfig) {
                resolve();
                return;
            }
            
            // ÏÑ§Ï†ï ÌååÏùº Î°úÎî© ÏãúÎÆ¨Î†àÏù¥ÏÖò
            setTimeout(() => {
                console.log('üìã ÏÑ§Ï†ï ÌååÏùº Î°úÎìú ÏôÑÎ£å');
                resolve();
            }, 300);
        });
    }

    /**
     * ÌïµÏã¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
     */
    async initializeCoreystems() {
        return new Promise(async (resolve) => {
            try {
                // Ï†ÄÏû•ÏÜå ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
                if (window.StorageManager) {
                    await StorageManager.initialize();
                }
                
                // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
                if (window.PerformanceMonitor) {
                    PerformanceMonitor.start();
                }
                
                // Î∂ÑÏÑù ÎèÑÍµ¨ Ï¥àÍ∏∞Ìôî
                if (window.AnalyticsManager) {
                    AnalyticsManager.initialize();
                }
                
                console.log('‚öôÔ∏è ÌïµÏã¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                resolve();
                
            } catch (error) {
                console.error('‚ùå ÌïµÏã¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                resolve(); // ÎπÑÌïÑÏàò ÏãúÏä§ÌÖúÏù¥ÎØÄÎ°ú Í≥ÑÏÜç ÏßÑÌñâ
            }
        });
    }

    /**
     * AI Î™®Îç∏ Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú
     */
    async loadAIModelsAndData() {
        return new Promise(async (resolve) => {
            try {
                const loadPromises = [];
                
                // TensorFlow.js Î™®Îç∏ Î°úÎìú
                if (window.SkinToneAnalyzer) {
                    loadPromises.push(SkinToneAnalyzer.loadModel());
                }
                
                // ÏÉâÏÉÅ Î∂ÑÎ•ò Î™®Îç∏ Î°úÎìú
                if (window.ColorClassifier) {
                    loadPromises.push(ColorClassifier.initialize());
                }
                
                // Í≥ÑÏ†àÎ≥Ñ ÏÉâÏÉÅ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
                if (window.SeasonsData) {
                    loadPromises.push(Promise.resolve()); // Ïù¥ÎØ∏ Î°úÎìúÎê®
                }
                
                // ÌïúÍµ≠Ïù∏ ÌîºÎ∂ÄÌÜ§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
                if (window.KoreanSkinTonesData) {
                    loadPromises.push(Promise.resolve()); // Ïù¥ÎØ∏ Î°úÎìúÎê®
                }
                
                await Promise.all(loadPromises);
                console.log('üß† AI Î™®Îç∏ Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
                resolve();
                
            } catch (error) {
                console.error('‚ùå AI Î™®Îç∏ Î°úÎìú Ïã§Ìå®:', error);
                // AI Í∏∞Îä• ÏóÜÏù¥ÎèÑ Í∏∞Î≥∏ Í∏∞Îä•ÏùÄ ÎèôÏûëÌïòÎèÑÎ°ù Ìï®
                resolve();
            }
        });
    }

    /**
     * Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî
     */
    async initializeComponents() {
        return new Promise((resolve) => {
            try {
                // ÏßÑÎã® Î™®Îìú Í¥ÄÎ¶¨Ïûê
                this.components.diagnosisMode = new DiagnosisMode();
                
                // ÏÇ¨ÏßÑ Î∂ÑÏÑù Ïª¥Ìè¨ÎÑåÌä∏
                this.components.photoAnalysis = new PhotoAnalysis();
                
                // ÎìúÎ†àÏù¥Ìïë Î™®Îìú Ïª¥Ìè¨ÎÑåÌä∏
                this.components.drapingMode = new DrapingMode();
                
                // Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Í∏∞
                this.components.reportGenerator = new ReportGenerator();
                
                // ÏÉâÏÉÅ ÌåîÎ†àÌä∏ Í¥ÄÎ¶¨Ïûê
                this.components.colorPalette = new ColorPalette();
                
                // Í≥†Í∞ù Í¥ÄÎ¶¨Ïûê
                this.components.customerManager = new CustomerManager();
                
                // UI Ïª¥Ìè¨ÎÑåÌä∏ Í¥ÄÎ¶¨Ïûê
                this.components.uiComponents = new UIComponents();
                
                console.log('üéõÔ∏è Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
                resolve();
                
            } catch (error) {
                console.error('‚ùå Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                throw error;
            }
        });
    }

    /**
     * Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
     */
    setupEventListeners() {
        // Ìó§Îçî Î≤ÑÌäºÎì§
        this.bindHeaderEvents();
        
        // Î™®Îìú ÏÑ†ÌÉù Î≤ÑÌäºÎì§
        this.bindModeEvents();
        
        // Í≥†Í∞ù Í¥ÄÎ¶¨ Ïù¥Î≤§Ìä∏Îì§
        this.bindCustomerEvents();
        
        // Ïï°ÏÖò Î∞î Ïù¥Î≤§Ìä∏Îì§
        this.bindActionEvents();
        
        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
        this.bindKeyboardShortcuts();
        
        // ÏúàÎèÑÏö∞ Ïù¥Î≤§Ìä∏Îì§
        this.bindWindowEvents();
        
        console.log('üéØ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
    }

    /**
     * Ìó§Îçî Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
     */
    bindHeaderEvents() {
        const settingsBtn = document.getElementById('settings-btn');
        const helpBtn = document.getElementById('help-btn');
        
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.showSettings());
        }
        
        if (helpBtn) {
            helpBtn.addEventListener('click', () => this.showHelp());
        }
    }

    /**
     * Î™®Îìú ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
     */
    bindModeEvents() {
        const modeButtons = document.querySelectorAll('.mode-btn');
        
        modeButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const mode = e.currentTarget.dataset.mode;
                this.switchMode(mode);
            });
        });
    }

    /**
     * Í≥†Í∞ù Í¥ÄÎ¶¨ Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
     */
    bindCustomerEvents() {
        const newCustomerBtn = document.getElementById('new-customer-btn');
        
        if (newCustomerBtn) {
            newCustomerBtn.addEventListener('click', () => this.showNewCustomerModal());
        }
        
        // Í≥†Í∞ù Î™©Î°ù ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏Îäî ÎèôÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨
        document.addEventListener('click', (e) => {
            if (e.target.closest('.customer-item')) {
                const customerItem = e.target.closest('.customer-item');
                const customerId = customerItem.dataset.customerId;
                if (customerId) {
                    this.selectCustomer(customerId);
                }
            }
        });
    }

    /**
     * Ïï°ÏÖò Î∞î Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
     */
    bindActionEvents() {
        const resetBtn = document.getElementById('reset-btn');
        const saveProgressBtn = document.getElementById('save-progress-btn');
        const completeDiagnosisBtn = document.getElementById('complete-diagnosis-btn');
        const generateFinalReportBtn = document.getElementById('generate-final-report-btn');
        
        if (resetBtn) {
            resetBtn.addEventListener('click', () => this.resetDiagnosis());
        }
        
        if (saveProgressBtn) {
            saveProgressBtn.addEventListener('click', () => this.saveProgress());
        }
        
        if (completeDiagnosisBtn) {
            completeDiagnosisBtn.addEventListener('click', () => this.completeDiagnosis());
        }
        
        if (generateFinalReportBtn) {
            generateFinalReportBtn.addEventListener('click', () => this.generateFinalReport());
        }
    }

    /**
     * ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Î∞îÏù∏Îî©
     */
    bindKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Ïà´ÏûêÌÇ§Î°ú Î™®Îìú Ï†ÑÌôò
            if ((e.ctrlKey || e.metaKey) && !e.shiftKey && !e.altKey) {
                switch (e.key) {
                    case '1':
                        e.preventDefault();
                        this.switchMode('photo');
                        break;
                    case '2':
                        e.preventDefault();
                        this.switchMode('draping');
                        break;
                    case 's':
                        e.preventDefault();
                        this.saveProgress();
                        break;
                    case 'r':
                        e.preventDefault();
                        this.resetDiagnosis();
                        break;
                    case 'h':
                        e.preventDefault();
                        this.showHelp();
                        break;
                }
            }
            
            // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }

    /**
     * ÏúàÎèÑÏö∞ Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
     */
    bindWindowEvents() {
        // ÌôîÎ©¥ Î∞©Ìñ• Î≥ÄÍ≤Ω Í∞êÏßÄ
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                this.handleOrientationChange();
            }, 100);
        });
        
        // Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏
        window.addEventListener('resize', () => {
            this.throttle(() => {
                this.handleResize();
            }, 250)();
        });
        
        // Ïñ∏Î°úÎìú Ïù¥Î≤§Ìä∏ (ÏßÑÌñâ Ï§ëÏù∏ ÏûëÏóÖ Ï†ÄÏû•)
        window.addEventListener('beforeunload', (e) => {
            if (this.hasUnsavedChanges()) {
                e.preventDefault();
                e.returnValue = 'Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùÄ ÏßÑÎã® Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§. Ï†ïÎßê ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?';
                return e.returnValue;
            }
        });
        
        // Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.handleAppHidden();
            } else {
                this.handleAppVisible();
            }
        });
    }

    /**
     * Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
     */
    async setInitialState() {
        return new Promise((resolve) => {
            try {
                // Ï†ÄÏû•Îêú Í≥†Í∞ù Î™©Î°ù Î°úÎìú
                this.loadCustomerList();
                
                // ÎßàÏßÄÎßâ ÏÇ¨Ïö© Î™®Îìú Î≥µÏõê
                const lastMode = localStorage.getItem('lastUsedMode') || 'photo';
                this.currentMode = lastMode;
                
                // Î™®Îìú UI ÏóÖÎç∞Ïù¥Ìä∏
                this.updateModeUI();
                
                // ÏÑ∏ÏÖò Ï†ïÎ≥¥ Î≥µÏõê
                this.restoreSession();
                
                console.log('üèÅ Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å');
                resolve();
                
            } catch (error) {
                console.error('‚ùå Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï Ïã§Ìå®:', error);
                resolve(); // ÎπÑÌïÑÏàòÏù¥ÎØÄÎ°ú Í≥ÑÏÜç ÏßÑÌñâ
            }
        });
    }

    /**
     * Î°úÎî© ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateLoadingProgress(percentage, message) {
        const progressBar = document.getElementById('loading-progress');
        const loadingText = document.getElementById('loading-text');
        
        if (progressBar) {
            progressBar.style.width = percentage + '%';
        }
        
        if (loadingText) {
            loadingText.textContent = message;
        }
        
        console.log(`üìä Î°úÎî© ÏßÑÌñâÎ•†: ${percentage}% - ${message}`);
    }

    /**
     * Î°úÎî© ÌôîÎ©¥ Ïà®Í∏∞Í∏∞
     */
    hideLoadingScreen() {
        const loadingSplash = document.getElementById('loading-splash');
        
        if (loadingSplash) {
            loadingSplash.style.opacity = '0';
            setTimeout(() => {
                loadingSplash.style.display = 'none';
            }, 300);
        }
    }

    /**
     * Î©îÏù∏ Ïï± ÌëúÏãú
     */
    showMainApp() {
        const app = document.getElementById('app');
        
        if (app) {
            app.style.display = 'flex';
            app.classList.add('animate-fadeIn');
        }
        
        // ÌôîÎ©¥ Î∞©Ìñ• ÏïåÎ¶º ÌëúÏãú (ÏÑ∏Î°ú Î™®ÎìúÏù∏ Í≤ΩÏö∞)
        this.checkOrientation();
    }

    /**
     * Î™®Îìú Ï†ÑÌôò
     */
    switchMode(mode) {
        if (!this.isInitialized || this.currentMode === mode) {
            return;
        }
        
        console.log(`üîÑ Î™®Îìú Ï†ÑÌôò: ${this.currentMode} ‚Üí ${mode}`);
        
        // ÌòÑÏû¨ Î™®Îìú Ï†ÄÏû•
        const previousMode = this.currentMode;
        this.currentMode = mode;
        
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
        localStorage.setItem('lastUsedMode', mode);
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        this.updateModeUI();
        
        // Î™®ÎìúÎ≥Ñ Ï¥àÍ∏∞Ìôî
        this.initializeMode(mode);
        
        // Ïù¥Ï†Ñ Î™®Îìú Ï†ïÎ¶¨
        this.cleanupMode(previousMode);
        
        // Î∂ÑÏÑù Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
        if (window.AnalyticsManager) {
            AnalyticsManager.track('mode_switch', { from: previousMode, to: mode });
        }
    }

    /**
     * Î™®Îìú UI ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateModeUI() {
        // Î™®Îìú Î≤ÑÌäº ÌôúÏÑ±Ìôî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const modeButtons = document.querySelectorAll('.mode-btn');
        modeButtons.forEach(button => {
            const buttonMode = button.dataset.mode;
            button.classList.toggle('active', buttonMode === this.currentMode);
        });
        
        // Î™®Îìú ÏΩòÌÖêÏ∏† ÌëúÏãú/Ïà®ÍπÄ
        const modeContents = document.querySelectorAll('.mode-content');
        modeContents.forEach(content => {
            const contentMode = content.id.replace('-mode', '').replace('photo-analysis', 'photo').replace('draping', 'draping');
            
            if (contentMode === this.currentMode) {
                content.style.display = 'flex';
                content.classList.add('active');
                content.classList.add('animate-fadeIn');
            } else {
                content.style.display = 'none';
                content.classList.remove('active');
                content.classList.remove('animate-fadeIn');
            }
        });
    }

    /**
     * Î™®ÎìúÎ≥Ñ Ï¥àÍ∏∞Ìôî
     */
    initializeMode(mode) {
        switch (mode) {
            case 'photo':
                if (this.components.photoAnalysis) {
                    this.components.photoAnalysis.initialize();
                }
                break;
                
            case 'draping':
                if (this.components.drapingMode) {
                    this.components.drapingMode.initialize();
                }
                break;
        }
    }

    /**
     * Î™®Îìú Ï†ïÎ¶¨
     */
    cleanupMode(mode) {
        switch (mode) {
            case 'photo':
                if (this.components.photoAnalysis) {
                    this.components.photoAnalysis.cleanup();
                }
                break;
                
            case 'draping':
                if (this.components.drapingMode) {
                    this.components.drapingMode.cleanup();
                }
                break;
        }
    }

    /**
     * ÏÉà Í≥†Í∞ù Î™®Îã¨ ÌëúÏãú
     */
    showNewCustomerModal() {
        if (this.components.customerManager) {
            this.components.customerManager.showNewCustomerModal();
        }
    }

    /**
     * Í≥†Í∞ù ÏÑ†ÌÉù
     */
    selectCustomer(customerId) {
        if (this.components.customerManager) {
            const customer = this.components.customerManager.getCustomer(customerId);
            if (customer) {
                this.currentCustomer = customer;
                this.updateCurrentCustomerUI();
                
                console.log('üë§ Í≥†Í∞ù ÏÑ†ÌÉù:', customer.name);
                
                // Î∂ÑÏÑù Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
                if (window.AnalyticsManager) {
                    AnalyticsManager.track('customer_selected', { customerId });
                }
            }
        }
    }

    /**
     * ÌòÑÏû¨ Í≥†Í∞ù UI ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateCurrentCustomerUI() {
        const currentCustomerElement = document.getElementById('current-customer');
        const customerNameElement = currentCustomerElement?.querySelector('.customer-name');
        
        if (customerNameElement && this.currentCustomer) {
            customerNameElement.textContent = this.currentCustomer.name;
            currentCustomerElement.classList.add('active');
        } else if (customerNameElement) {
            customerNameElement.textContent = 'Í≥†Í∞ùÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî';
            currentCustomerElement.classList.remove('active');
        }
    }

    /**
     * Í≥†Í∞ù Î™©Î°ù Î°úÎìú
     */
    loadCustomerList() {
        if (this.components.customerManager) {
            this.components.customerManager.loadCustomerList();
        }
    }

    /**
     * ÏßÑÎã® Ï¥àÍ∏∞Ìôî
     */
    resetDiagnosis() {
        if (confirm('ÌòÑÏû¨ ÏßÑÎã® Îç∞Ïù¥ÌÑ∞Í∞Ä Î™®Îëê ÏÇ≠Ï†úÎê©ÎãàÎã§. Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            this.diagnosisData = null;
            
            // Í∞Å Î™®ÎìúÎ≥Ñ Ï¥àÍ∏∞Ìôî
            if (this.components.photoAnalysis) {
                this.components.photoAnalysis.reset();
            }
            
            if (this.components.drapingMode) {
                this.components.drapingMode.reset();
            }
            
            // UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            this.updateActionButtonsState();
            
            this.showToast('ÏßÑÎã®Ïù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.', 'info');
            
            console.log('üîÑ ÏßÑÎã® Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        }
    }

    /**
     * ÏßÑÌñâ ÏÉÅÌô© Ï†ÄÏû•
     */
    async saveProgress() {
        if (!this.currentCustomer) {
            this.showToast('Í≥†Í∞ùÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
            return;
        }
        
        try {
            const progressData = {
                customerId: this.currentCustomer.id,
                mode: this.currentMode,
                diagnosisData: this.diagnosisData,
                timestamp: new Date().toISOString()
            };
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            const progressKey = `progress_${this.currentCustomer.id}`;
            localStorage.setItem(progressKey, JSON.stringify(progressData));
            
            this.showToast('ÏßÑÌñâ ÏÉÅÌô©Ïù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.', 'success');
            
            console.log('üíæ ÏßÑÌñâ ÏÉÅÌô© Ï†ÄÏû• ÏôÑÎ£å');
            
        } catch (error) {
            console.error('‚ùå ÏßÑÌñâ ÏÉÅÌô© Ï†ÄÏû• Ïã§Ìå®:', error);
            this.showToast('Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    /**
     * ÏßÑÎã® ÏôÑÎ£å
     */
    completeDiagnosis() {
        if (!this.validateDiagnosis()) {
            return;
        }
        
        // ÏßÑÎã® ÏôÑÎ£å Ï≤òÎ¶¨
        this.diagnosisData.isComplete = true;
        this.diagnosisData.completedAt = new Date().toISOString();
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        this.updateActionButtonsState();
        
        this.showToast('ÏßÑÎã®Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!', 'success');
        
        console.log('‚úÖ ÏßÑÎã® ÏôÑÎ£å');
    }

    /**
     * ÏµúÏ¢Ö Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
     */
    async generateFinalReport() {
        if (!this.diagnosisData || !this.diagnosisData.isComplete) {
            this.showToast('ÏßÑÎã®ÏùÑ Î®ºÏ†Ä ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
            return;
        }
        
        try {
            if (this.components.reportGenerator) {
                const report = await this.components.reportGenerator.generateReport(
                    this.currentCustomer,
                    this.diagnosisData
                );
                
                this.showReportModal(report);
                
                console.log('üìã ÏµúÏ¢Ö Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å');
            }
            
        } catch (error) {
            console.error('‚ùå Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®:', error);
            this.showToast('Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    /**
     * ÏßÑÎã® Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
     */
    validateDiagnosis() {
        if (!this.currentCustomer) {
            this.showToast('Í≥†Í∞ùÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
            return false;
        }
        
        if (!this.diagnosisData) {
            this.showToast('ÏßÑÎã® Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. ÏßÑÎã®ÏùÑ Î®ºÏ†Ä Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
            return false;
        }
        
        // Î™®ÎìúÎ≥Ñ Í≤ÄÏ¶ù
        if (this.currentMode === 'photo') {
            if (!this.diagnosisData.photoAnalysis) {
                this.showToast('ÏÇ¨ÏßÑ Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.', 'warning');
                return false;
            }
        } else if (this.currentMode === 'draping') {
            if (!this.diagnosisData.drapingAnalysis) {
                this.showToast('ÎìúÎ†àÏù¥Ìïë Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.', 'warning');
                return false;
            }
        }
        
        return true;
    }

    /**
     * Ïï°ÏÖò Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateActionButtonsState() {
        const completeDiagnosisBtn = document.getElementById('complete-diagnosis-btn');
        const generateFinalReportBtn = document.getElementById('generate-final-report-btn');
        
        const hasDiagnosisData = this.diagnosisData !== null;
        const isComplete = this.diagnosisData?.isComplete === true;
        
        if (completeDiagnosisBtn) {
            completeDiagnosisBtn.disabled = !hasDiagnosisData || isComplete;
        }
        
        if (generateFinalReportBtn) {
            generateFinalReportBtn.disabled = !isComplete;
        }
    }

    /**
     * ÌôîÎ©¥ Î∞©Ìñ• ÌôïÏù∏
     */
    checkOrientation() {
        const isPortrait = window.innerHeight > window.innerWidth;
        
        if (isPortrait) {
            this.showOrientationNotice();
        } else {
            this.hideOrientationNotice();
        }
    }

    /**
     * ÏÑ∏Î°ú Î™®Îìú ÏïåÎ¶º ÌëúÏãú
     */
    showOrientationNotice() {
        let notice = document.querySelector('.orientation-notice');
        
        if (!notice) {
            notice = document.createElement('div');
            notice.className = 'orientation-notice';
            notice.innerHTML = 'üì± Í∞ÄÎ°ú Î™®ÎìúÏóêÏÑú ÏµúÏ†ÅÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§';
            document.body.appendChild(notice);
        }
        
        notice.style.display = 'block';
    }

    /**
     * ÏÑ∏Î°ú Î™®Îìú ÏïåÎ¶º Ïà®Í∏∞Í∏∞
     */
    hideOrientationNotice() {
        const notice = document.querySelector('.orientation-notice');
        if (notice) {
            notice.style.display = 'none';
        }
    }

    /**
     * ÌôîÎ©¥ Î∞©Ìñ• Î≥ÄÍ≤Ω Ï≤òÎ¶¨
     */
    handleOrientationChange() {
        console.log('üîÑ ÌôîÎ©¥ Î∞©Ìñ• Î≥ÄÍ≤Ω Í∞êÏßÄ');
        
        this.checkOrientation();
        
        // Ïª¥Ìè¨ÎÑåÌä∏Îì§ÏóêÍ≤å Î∞©Ìñ• Î≥ÄÍ≤Ω ÏïåÎ¶º
        Object.values(this.components).forEach(component => {
            if (typeof component.handleOrientationChange === 'function') {
                component.handleOrientationChange();
            }
        });
    }

    /**
     * Î¶¨ÏÇ¨Ïù¥Ï¶à Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
     */
    handleResize() {
        // Ïª¥Ìè¨ÎÑåÌä∏Îì§ÏóêÍ≤å Î¶¨ÏÇ¨Ïù¥Ï¶à ÏïåÎ¶º
        Object.values(this.components).forEach(component => {
            if (typeof component.handleResize === 'function') {
                component.handleResize();
            }
        });
    }

    /**
     * Ïï±Ïù¥ Ïà®Í≤®Ïßà Îïå Ï≤òÎ¶¨
     */
    handleAppHidden() {
        // ÏûêÎèô Ï†ÄÏû•
        if (this.hasUnsavedChanges()) {
            this.saveProgress();
        }
        
        // Ïπ¥Î©îÎùº Ï†ïÏßÄ
        if (this.components.photoAnalysis) {
            this.components.photoAnalysis.pauseCamera();
        }
    }

    /**
     * Ïï±Ïù¥ Î≥¥Ïùº Îïå Ï≤òÎ¶¨
     */
    handleAppVisible() {
        // Ïπ¥Î©îÎùº Ïû¨ÏãúÏûë
        if (this.currentMode === 'photo' && this.components.photoAnalysis) {
            this.components.photoAnalysis.resumeCamera();
        }
    }

    /**
     * Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùÄ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
     */
    hasUnsavedChanges() {
        return this.diagnosisData !== null && !this.diagnosisData.isSaved;
    }

    /**
     * ÏÑ∏ÏÖò Î≥µÏõê
     */
    restoreSession() {
        try {
            const sessionData = localStorage.getItem('currentSession');
            if (sessionData) {
                const session = JSON.parse(sessionData);
                
                if (session.customerId) {
                    this.selectCustomer(session.customerId);
                }
                
                if (session.diagnosisData) {
                    this.diagnosisData = session.diagnosisData;
                    this.updateActionButtonsState();
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è ÏÑ∏ÏÖò Î≥µÏõê Ïã§Ìå®:', error);
        }
    }

    /**
     * ÏÑ§Ï†ï ÌôîÎ©¥ ÌëúÏãú
     */
    showSettings() {
        // TODO: ÏÑ§Ï†ï Î™®Îã¨ Íµ¨ÌòÑ
        console.log('‚öôÔ∏è ÏÑ§Ï†ï ÌôîÎ©¥ ÌëúÏãú');
    }

    /**
     * ÎèÑÏõÄÎßê ÌëúÏãú
     */
    showHelp() {
        // TODO: ÎèÑÏõÄÎßê Î™®Îã¨ Íµ¨ÌòÑ
        console.log('‚ùì ÎèÑÏõÄÎßê ÌëúÏãú');
    }

    /**
     * Î™®Îì† Î™®Îã¨ Îã´Í∏∞
     */
    closeAllModals() {
        const modals = document.querySelectorAll('.modal-overlay');
        modals.forEach(modal => {
            modal.remove();
        });
    }

    /**
     * Î≥¥Í≥†ÏÑú Î™®Îã¨ ÌëúÏãú
     */
    showReportModal(report) {
        // TODO: Î≥¥Í≥†ÏÑú Î™®Îã¨ Íµ¨ÌòÑ
        console.log('üìã Î≥¥Í≥†ÏÑú Î™®Îã¨ ÌëúÏãú:', report);
    }

    /**
     * ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º ÌëúÏãú
     */
    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icon = {
            info: 'üí°',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
        }[type] || 'üí°';
        
        toast.innerHTML = `
            <span class="toast-icon">${icon}</span>
            <div class="toast-content">
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close">√ó</button>
        `;
        
        // ÌÜ†Ïä§Ìä∏ Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏/ÏÉùÏÑ±
        let container = document.querySelector('.toast-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            document.body.appendChild(container);
        }
        
        container.appendChild(toast);
        
        // ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            toast.remove();
        }, 5000);
        
        // Îã´Í∏∞ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
        const closeBtn = toast.querySelector('.toast-close');
        closeBtn.addEventListener('click', () => {
            toast.remove();
        });
    }

    /**
     * ÏóêÎü¨ ÌëúÏãú
     */
    showError(message) {
        console.error('‚ùå ÏóêÎü¨:', message);
        this.showToast(message, 'error');
    }

    /**
     * Ïì∞Î°úÌãÄ Ïú†Ìã∏Î¶¨Ìã∞
     */
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Î∞è Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú ÏÑ§Ï†ï
window.PersonalColorApp = new PersonalColorApp();

// Í∞úÎ∞úÏûê ÎèÑÍµ¨Ïö© ÎîîÎ≤ÑÍ∑∏ Ìï®ÏàòÎì§
if (process.env.NODE_ENV === 'development') {
    window.debugApp = {
        getApp: () => window.PersonalColorApp,
        switchMode: (mode) => window.PersonalColorApp.switchMode(mode),
        resetApp: () => location.reload(),
        showComponents: () => console.table(window.PersonalColorApp.components),
        getCurrentState: () => ({
            currentCustomer: window.PersonalColorApp.currentCustomer,
            currentMode: window.PersonalColorApp.currentMode,
            diagnosisData: window.PersonalColorApp.diagnosisData
        })
    };
    
    console.log('üîß Í∞úÎ∞úÏûê ÎèÑÍµ¨: window.debugApp ÏÇ¨Ïö© Í∞ÄÎä•');
}
