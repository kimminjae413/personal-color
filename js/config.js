/**
 * config.js - Personal Color Pro ÏôÑÏ†ÑÌïú ÏµúÏ¢Ö ÏÑ§Ï†ï Î≤ÑÏ†Ñ
 * 
 * üöÄ ÏôÑÏ†Ñ Î≥µÏõê: ÏõêÎ≥∏Ïùò Î™®Îì† ÏÑ§Ï†ï Ìï≠Î™© Ìè¨Ìï®
 * ‚úÖ getConfig() Ìï®Ïàò + Ï†ÑÏó≠ Ìï®ÏàòÎì§
 * ‚úÖ ÎìúÎ†àÏù¥Ìïë ÏãúÏä§ÌÖú ÏôÑÏ†Ñ ÏÑ§Ï†ï
 * ‚úÖ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏÉÅÏÑ∏ ÏÑ§Ï†ï  
 * ‚úÖ Íµ≠Ï†úÌôî Îã§Íµ≠Ïñ¥ ÏßÄÏõê
 * ‚úÖ Í≥†Í∞ù Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
 * ‚úÖ Î≥¥Ïïà Î∞è Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏
 * ‚úÖ ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏÑ∏Î∂Ä ÏÑ§Ï†ï
 * ‚úÖ UI/UX Ï†ëÍ∑ºÏÑ± ÏÑ§Ï†ï
 */

// ÏïàÏ†ÑÌïú Î∏åÎùºÏö∞Ï†Ä API Ï†ëÍ∑º Ìï®Ïàò
const safeNavigatorAccess = (property, fallback = null) => {
    try {
        return navigator[property] !== undefined ? navigator[property] : fallback;
    } catch (error) {
        console.warn(`Navigator.${property} Ï†ëÍ∑º Ïã§Ìå®:`, error);
        return fallback;
    }
};

// ÌôòÍ≤Ω Í∞êÏßÄ Ìï®Ïàò (process.env ÏôÑÏ†Ñ ÎåÄÏ≤¥)
const detectEnvironment = () => {
    try {
        const hostname = window.location.hostname;
        const protocol = window.location.protocol;
        
        if (hostname === 'localhost' || 
            hostname === '127.0.0.1' || 
            hostname.startsWith('192.168.') ||
            hostname.startsWith('10.') ||
            protocol === 'file:') {
            return 'development';
        }
        
        if (hostname.includes('staging') || 
            hostname.includes('test') || 
            hostname.includes('dev') ||
            hostname.includes('preview')) {
            return 'staging';
        }
        
        return 'production';
    } catch (error) {
        console.warn('ÌôòÍ≤Ω Í∞êÏßÄ Ïã§Ìå®:', error);
        return 'production';
    }
};

// ÌòÑÏû¨ ÌôòÍ≤Ω
const CURRENT_ENVIRONMENT = detectEnvironment();

// üî• Í∏¥Í∏â Ï∂îÍ∞Ä: getConfig Ìï®Ïàò (8Í∞ú ÌååÏùº Î°úÎìú Ïã§Ìå® Ìï¥Í≤∞)
/**
 * Ï†ÑÏó≠ ÏÑ§Ï†ïÍ∞í Ï†ëÍ∑º Ìï®Ïàò
 * @param {string} keyPath - ÏÑ§Ï†ï ÌÇ§ Í≤ΩÎ°ú (Ïòà: 'CAMERA.constraints', 'AI_MODELS.confidenceThreshold')
 * @param {*} defaultValue - Í∏∞Î≥∏Í∞í
 * @returns {*} ÏÑ§Ï†ïÍ∞í ÎòêÎäî Í∏∞Î≥∏Í∞í
 */
function getConfig(keyPath, defaultValue = null) {
    try {
        if (!window.PersonalColorConfig) {
            console.warn('PersonalColorConfigÍ∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            return defaultValue;
        }

        // ÌÇ§ Í≤ΩÎ°úÎ•º Ï†ê(.)ÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Ï§ëÏ≤©Îêú Í∞ùÏ≤¥Ïóê Ï†ëÍ∑º
        const keys = keyPath.split('.');
        let current = window.PersonalColorConfig;
        
        for (const key of keys) {
            if (current === null || current === undefined || typeof current !== 'object') {
                console.warn(`ÏÑ§Ï†ï Í≤ΩÎ°ú '${keyPath}'ÏóêÏÑú '${key}' Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
                return defaultValue;
            }
            current = current[key];
        }
        
        return current !== undefined ? current : defaultValue;
        
    } catch (error) {
        console.warn(`getConfig Ïò§Î•ò (${keyPath}):`, error);
        return defaultValue;
    }
}

// Ï†ÑÏó≠ÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù Îì±Î°ù
window.getConfig = getConfig;

// Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥ ÏàòÏßë (ÏïàÏ†ÑÌïú Ï†ëÍ∑º)
const getBrowserInfo = () => {
    return {
        userAgent: safeNavigatorAccess('userAgent', 'Unknown'),
        language: safeNavigatorAccess('language', 'ko'),
        languages: safeNavigatorAccess('languages', ['ko']),
        platform: safeNavigatorAccess('platform', 'Unknown'),
        cookieEnabled: safeNavigatorAccess('cookieEnabled', true),
        onLine: safeNavigatorAccess('onLine', true),
        hardwareConcurrency: safeNavigatorAccess('hardwareConcurrency', 4),
        deviceMemory: safeNavigatorAccess('deviceMemory', 4), // Chrome Ï†ÑÏö©
        maxTouchPoints: safeNavigatorAccess('maxTouchPoints', 0),
        
        // Ïó∞Í≤∞ Ï†ïÎ≥¥ (Chrome/Edge Ï†ÑÏö©, ÏïàÏ†ÑÌïú Ï†ëÍ∑º)
        connection: (() => {
            try {
                const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
                return connection ? {
                    effectiveType: connection.effectiveType || '4g',
                    downlink: connection.downlink || 10,
                    rtt: connection.rtt || 100,
                    saveData: connection.saveData || false
                } : null;
            } catch (error) {
                return null;
            }
        })(),
        
        // Î∏åÎùºÏö∞Ï†Ä Í∏∞Îä• ÏßÄÏõê Ï≤¥ÌÅ¨
        features: {
            webgl: !!window.WebGLRenderingContext,
            webgl2: !!window.WebGL2RenderingContext,
            webrtc: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
            workers: !!window.Worker,
            serviceWorkers: 'serviceWorker' in navigator,
            indexedDB: !!window.indexedDB,
            canvas: !!document.createElement('canvas').getContext,
            fileReader: !!window.FileReader,
            geolocation: 'geolocation' in navigator,
            vibration: 'vibrate' in navigator,
            battery: 'getBattery' in navigator,
            gamepad: 'getGamepads' in navigator
        }
    };
};

// ÎîîÎ∞îÏù¥Ïä§ ÌÉÄÏûÖ Í∞êÏßÄ
const getDeviceType = () => {
    const userAgent = safeNavigatorAccess('userAgent', '').toLowerCase();
    const maxTouchPoints = safeNavigatorAccess('maxTouchPoints', 0);
    
    if (userAgent.includes('mobile') || userAgent.includes('android') || userAgent.includes('iphone')) {
        return 'mobile';
    } else if (userAgent.includes('tablet') || userAgent.includes('ipad') || (maxTouchPoints > 1 && !userAgent.includes('mac'))) {
        return 'tablet';
    } else {
        return 'desktop';
    }
};

/**
 * Personal Color Pro ÏôÑÏ†ÑÌïú Ï†ÑÏó≠ ÏÑ§Ï†ï Í∞ùÏ≤¥
 */
window.PersonalColorConfig = {
    // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∏∞Î≥∏ Ï†ïÎ≥¥
    APP_INFO: {
        name: 'Personal Color Analyzer Pro',
        version: '1.0.0',
        description: 'Ìó§Ïñ¥ÎîîÏûêÏù¥ÎÑàÏö© ÌçºÏä§ÎÑêÏª¨Îü¨ ÏßÑÎã® ÌÉúÎ∏îÎ¶ø ÏãúÏä§ÌÖú',
        author: 'Personal Color Pro Team',
        buildDate: new Date().toISOString().split('T')[0],
        buildTime: new Date().toISOString(),
        environment: CURRENT_ENVIRONMENT,
        deviceType: getDeviceType(),
        browserInfo: getBrowserInfo(),
        
        // ÏßÄÏõê Ï†ïÎ≥¥
        support: {
            email: 'support@personalcolorpro.com',
            website: 'https://personalcolorpro.com',
            documentation: 'https://docs.personalcolorpro.com',
            version: '1.0.0',
            lastUpdated: '2024-01-01'
        }
    },

    // ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï
    ENVIRONMENT: {
        current: CURRENT_ENVIRONMENT,
        isDevelopment: CURRENT_ENVIRONMENT === 'development',
        isStaging: CURRENT_ENVIRONMENT === 'staging',
        isProduction: CURRENT_ENVIRONMENT === 'production',
        
        // ÌôòÍ≤ΩÎ≥Ñ Í∏∞Îä• ÌîåÎûòÍ∑∏
        features: {
            development: {
                debugMode: true,
                verboseLogging: true,
                performanceMetrics: true,
                errorReporting: false,
                analytics: false,
                hotReload: true
            },
            staging: {
                debugMode: true,
                verboseLogging: false,
                performanceMetrics: true,
                errorReporting: true,
                analytics: false,
                hotReload: false
            },
            production: {
                debugMode: false,
                verboseLogging: false,
                performanceMetrics: false,
                errorReporting: true,
                analytics: true,
                hotReload: false
            }
        }[CURRENT_ENVIRONMENT]
    },

    // API Î∞è ÏÑúÎ≤Ñ ÏÑ§Ï†ï
    API: {
        baseUrl: CURRENT_ENVIRONMENT === 'development' 
            ? 'http://localhost:3000/api/v1' 
            : '/api/v1',
        timeout: 30000,
        retryAttempts: 3,
        retryDelay: 1000,
        retryBackoffMultiplier: 2,
        
        endpoints: {
            analysis: '/analysis',
            customers: '/customers',
            reports: '/reports',
            models: '/models',
            upload: '/upload',
            export: '/export',
            analytics: '/analytics',
            auth: '/auth',
            settings: '/settings',
            feedback: '/feedback'
        },
        
        // ÏöîÏ≤≠ ÏÑ§Ï†ï
        defaultHeaders: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-Client-Version': '1.0.0',
            'X-Client-Platform': getDeviceType()
        }
    },

    // AI Î™®Îç∏ Î∞è Î∂ÑÏÑù ÏÑ§Ï†ï
    AI_MODELS: {
        skinToneAnalyzer: {
            modelUrl: './js/ai/models/personal-color-model.json',
            weightsUrl: './js/ai/models/skin-tone-weights.bin',
            inputSize: [224, 224, 3],
            outputClasses: ['spring', 'summer', 'autumn', 'winter'],
            confidenceThreshold: CURRENT_ENVIRONMENT === 'development' ? 0.75 : 0.85,
            maxBatchSize: 1,
            
            // Ï†ÑÏ≤òÎ¶¨ ÏÑ§Ï†ï
            preprocessingSettings: {
                normalize: true,
                centerCrop: true,
                colorSpace: 'RGB',
                meanSubtraction: [0.485, 0.456, 0.406],
                stdNormalization: [0.229, 0.224, 0.225]
            }
        },
        
        faceDetection: {
            modelType: 'blazeface',
            modelUrl: 'https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1',
            maxNumFaces: 1,
            minDetectionConfidence: 0.7,
            minTrackingConfidence: 0.5,
            selfieMode: true,
            
            // ÎåÄÏïà ÏÑ§Ï†ï
            fallback: {
                enabled: true,
                method: 'manual_selection',
                defaultRegion: { x: 0.25, y: 0.25, width: 0.5, height: 0.5 }
            }
        },
        
        colorClassifier: {
            algorithm: 'deltaE2000',
            colorSpace: 'CIELAB',
            toleranceThreshold: 3.0,
            
            // Í≥ÑÏ†àÎ≥Ñ Í∏∞Ï§Ä ÏÉâÏÉÅ (LAB Í∞í Ìè¨Ìï®)
            referenceColors: {
                spring: [
                    { name: 'ÏΩîÎûÑ ÌïëÌÅ¨', hex: '#FFB6C1', lab: [81, 24, 12] },
                    { name: 'ÌîºÏπò', hex: '#FFCBA4', lab: [82, 12, 28] },
                    { name: 'ÎØºÌä∏', hex: '#98FB98', lab: [91, -26, 24] },
                    { name: 'ÎùºÎ≤§Îçî', hex: '#E6E6FA', lab: [91, 4, -8] }
                ],
                summer: [
                    { name: 'ÎçîÏä§Ìã∞ Î°úÏ¶à', hex: '#C8A2C8', lab: [71, 18, -8] },
                    { name: 'ÏÜåÌîÑÌä∏ Î∏îÎ£®', hex: '#B0E0E6', lab: [86, -8, -12] },
                    { name: 'ÎùºÏùºÎùΩ', hex: '#C8A2C8', lab: [71, 18, -8] },
                    { name: 'ÏÑ∏Ïù¥ÏßÄ', hex: '#9CAF88', lab: [66, -12, 18] }
                ],
                autumn: [
                    { name: 'ÌÖåÎùºÏΩîÌÉÄ', hex: '#E2725B', lab: [60, 32, 28] },
                    { name: 'Ïò¨Î¶¨Î∏å', hex: '#808000', lab: [49, -8, 38] },
                    { name: 'Î®∏Ïä§ÌÉÄÎìú', hex: '#FFDB58', lab: [84, -2, 68] },
                    { name: 'Îî• Ìã∞Ïñº', hex: '#008080', lab: [48, -28, -8] }
                ],
                winter: [
                    { name: 'Î°úÏñÑ Î∏îÎ£®', hex: '#4169E1', lab: [45, 26, -67] },
                    { name: 'ÏóêÎ©îÎûÑÎìú', hex: '#50C878', lab: [70, -48, 38] },
                    { name: 'Îî• Î†àÎìú', hex: '#8B0000', lab: [25, 48, 38] },
                    { name: 'Ìì®ÏÉ§', hex: '#FF1493', lab: [54, 78, -8] }
                ]
            }
        }
    },

    // Ïπ¥Î©îÎùº Î∞è ÎØ∏ÎîîÏñ¥ ÏÑ§Ï†ï
    CAMERA: {
        preferredResolution: {
            width: getDeviceType() === 'mobile' ? 1280 : 1920,
            height: getDeviceType() === 'mobile' ? 720 : 1080
        },
        
        fallbackResolutions: [
            { width: 1920, height: 1080 },
            { width: 1280, height: 720 },
            { width: 854, height: 480 },
            { width: 640, height: 480 }
        ],
        
        frameRate: getDeviceType() === 'mobile' ? 24 : 30,
        facingMode: 'user',
        
        constraints: {
            video: {
                width: { 
                    ideal: getDeviceType() === 'mobile' ? 1280 : 1920, 
                    min: 640, 
                    max: 3840 
                },
                height: { 
                    ideal: getDeviceType() === 'mobile' ? 720 : 1080, 
                    min: 480, 
                    max: 2160 
                },
                frameRate: { 
                    ideal: getDeviceType() === 'mobile' ? 24 : 30, 
                    min: 15, 
                    max: 60 
                },
                facingMode: 'user',
                aspectRatio: { ideal: 16/9, min: 4/3, max: 21/9 }
            },
            audio: false
        },
        
        captureSettings: {
            imageFormat: 'image/jpeg',
            quality: 0.9,
            maxFileSize: 10 * 1024 * 1024 // 10MB
        }
    },

    // ÏÉâÏÉÅ Î∂ÑÏÑù ÏÉÅÏÑ∏ ÏÑ§Ï†ï
    COLOR_ANALYSIS: {
        standardIlluminant: {
            type: 'D65',
            temperature: 6504,
            chromaticity: { x: 0.3127, y: 0.3290 },
            intensity: 300,
            description: 'Average daylight'
        },
        
        // ÌîºÎ∂Ä ÏòÅÏó≠ Í∞êÏßÄ ÏÑ§Ï†ï
        skinDetection: {
            regions: {
                forehead: { x: 0.3, y: 0.15, w: 0.4, h: 0.15 },
                leftCheek: { x: 0.15, y: 0.35, w: 0.2, h: 0.2 },
                rightCheek: { x: 0.65, y: 0.35, w: 0.2, h: 0.2 },
                nose: { x: 0.4, y: 0.4, w: 0.2, h: 0.2 },
                chin: { x: 0.35, y: 0.65, w: 0.3, h: 0.15 }
            },
            
            weights: {
                forehead: 0.25,
                leftCheek: 0.25,
                rightCheek: 0.25,
                nose: 0.15,
                chin: 0.10
            },
            
            qualityThresholds: {
                minPixelCount: 1000,
                maxPixelCount: 50000,
                minVariance: 10,
                maxVariance: 100,
                minConfidence: 0.7,
                minFaceSize: 0.1
            }
        },
        
        // ÏÉâÏÉÅ Í≥µÍ∞Ñ ÏÑ§Ï†ï
        colorSpaces: {
            input: 'sRGB',
            analysis: 'CIELAB',
            display: 'sRGB',
            deltaE: 'CIE2000',
            
            // Î≥ÄÌôò Îß§Ìä∏Î¶≠Ïä§ (sRGB to XYZ)
            transformMatrix: [
                [0.4124, 0.3576, 0.1805],
                [0.2126, 0.7152, 0.0722],
                [0.0193, 0.1192, 0.9505]
            ],
            
            whitePoint: {
                X: 95.047,
                Y: 100.000,
                Z: 108.883
            }
        },
        
        // Í≥ÑÏ†à Î∂ÑÎ•ò Í∏∞Ï§Ä
        seasonClassification: {
            undertone: {
                warm: { aThreshold: 3, bThreshold: 6 },
                cool: { aThreshold: -3, bThreshold: -6 },
                neutral: { aRange: [-3, 3], bRange: [-6, 6] }
            },
            
            lightness: {
                light: { LThreshold: 65 },
                medium: { LRange: [45, 65] },
                deep: { LThreshold: 45 }
            },
            
            // ÌïúÍµ≠Ïù∏ ÌäπÌôî Î≥¥Ï†ïÍ∞í
            koreanSkinAdjustment: {
                undertoneBoost: 1.2,
                lightnessBoost: 0.9,
                saturationBoost: 1.1
            }
        }
    },

    // üé® ÎìúÎ†àÏù¥Ìïë ÏãúÏä§ÌÖú ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≥µÏõê)
    DRAPING: {
        // Í≥ÑÏ†àÎ≥Ñ ÏÉâÏÉÅ ÏÑ∏Ìä∏ (Ï†ÑÎ¨∏Í∞Ä Í≤ÄÏ¶ùÎêú ÏÉâÏÉÅ)
        colorSets: {
            spring: [
                { name: 'ÏΩîÎûÑ ÌïëÌÅ¨', hex: '#FF7F7F', lab: [65, 40, 20], pantone: 'Coral Pink' },
                { name: 'ÌîºÏπò Ïò§Î†åÏßÄ', hex: '#FFB347', lab: [75, 15, 45], pantone: 'Peach Orange' },
                { name: 'ÏïÑÏø†ÏïÑ Î∏îÎ£®', hex: '#7FFFD4', lab: [85, -25, 10], pantone: 'Aqua Blue' },
                { name: 'ÎùºÎ≤§Îçî', hex: '#E6E6FA', lab: [90, 5, -15], pantone: 'Lavender' },
                { name: 'ÏòêÎ°úÏö∞ Í∑∏Î¶∞', hex: '#ADFF2F', lab: [88, -35, 75], pantone: 'Yellow Green' },
                { name: 'Í≥®Îì† ÏòêÎ°úÏö∞', hex: '#FFD700', lab: [84, 5, 88], pantone: 'Golden Yellow' }
            ],
            
            summer: [
                { name: 'ÎçîÏä§Ìã∞ Î°úÏ¶à', hex: '#C8A2C8', lab: [71, 18, -8], pantone: 'Dusty Rose' },
                { name: 'ÌååÏö∞Îçî Î∏îÎ£®', hex: '#B0E0E6', lab: [86, -8, -12], pantone: 'Powder Blue' },
                { name: 'ÎùºÏùºÎùΩ Í∑∏Î†àÏù¥', hex: '#C8A2C8', lab: [71, 18, -8], pantone: 'Lilac Gray' },
                { name: 'ÏÑ∏Ïù¥ÏßÄ Í∑∏Î¶∞', hex: '#9CAF88', lab: [66, -12, 18], pantone: 'Sage Green' },
                { name: 'ÏÜåÌîÑÌä∏ ÌïëÌÅ¨', hex: '#F8BBD9', lab: [81, 28, -2], pantone: 'Soft Pink' },
                { name: 'ÎØ∏Ïä§Ìä∏ Î∏îÎ£®', hex: '#C4D3E0', lab: [83, -2, -8], pantone: 'Mist Blue' }
            ],
            
            autumn: [
                { name: 'ÌÖåÎùºÏΩîÌÉÄ', hex: '#E2725B', lab: [60, 32, 28], pantone: 'Terracotta' },
                { name: 'Ïò¨Î¶¨Î∏å Í∑∏Î¶∞', hex: '#808000', lab: [49, -8, 38], pantone: 'Olive Green' },
                { name: 'Î®∏Ïä§ÌÉÄÎìú', hex: '#FFDB58', lab: [84, -2, 68], pantone: 'Mustard' },
                { name: 'Îî• Ìã∞Ïñº', hex: '#008080', lab: [48, -28, -8], pantone: 'Deep Teal' },
                { name: 'Î≤àÌä∏ Ïò§Î†åÏßÄ', hex: '#CC5500', lab: [50, 42, 58], pantone: 'Burnt Orange' },
                { name: 'Í≥®Îì† Î∏åÎùºÏö¥', hex: '#B8860B', lab: [58, 8, 68], pantone: 'Golden Brown' }
            ],
            
            winter: [
                { name: 'Î°úÏñÑ Î∏îÎ£®', hex: '#4169E1', lab: [45, 26, -67], pantone: 'Royal Blue' },
                { name: 'ÏóêÎ©îÎûÑÎìú', hex: '#50C878', lab: [70, -48, 38], pantone: 'Emerald' },
                { name: 'Îî• Î†àÎìú', hex: '#8B0000', lab: [25, 48, 38], pantone: 'Deep Red' },
                { name: 'Ìì®ÏÉ§', hex: '#FF1493', lab: [54, 78, -8], pantone: 'Fuchsia' },
                { name: 'ÏïÑÏù¥Ïãú Î∏îÎ£®', hex: '#B0E0E6', lab: [86, -8, -12], pantone: 'Icy Blue' },
                { name: 'Ìä∏Î£® ÌôîÏù¥Ìä∏', hex: '#FFFFFF', lab: [100, 0, 0], pantone: 'True White' }
            ]
        },
        
        // Í∞ÄÏÉÅ ÎìúÎ†àÏù¥Ìïë ÏÑ§Ï†ï
        virtualDraping: {
            enabled: true,
            blendMode: 'multiply',
            opacity: 0.6,
            smoothing: 0.3,
            realTimeProcessing: true,
            
            rendering: {
                quality: 'high',
                antialiasing: true,
                shadows: true,
                reflections: false
            },
            
            fabricProperties: {
                shininess: 0.1,
                roughness: 0.8,
                metallic: 0.0,
                transparency: 0.1
            }
        },
        
        // ÎπÑÍµê ÎèÑÍµ¨
        comparison: {
            enableSideBySide: true,
            enableBeforeAfter: true,
            enableOverlay: true,
            autoCapture: true,
            maxComparisons: 12,
            
            autoEvaluation: {
                enabled: true,
                criteria: ['brightness', 'contrast', 'harmony'],
                weightings: { brightness: 0.3, contrast: 0.4, harmony: 0.3 }
            }
        },
        
        // Ï†ÑÎ¨∏Í∞Ä ÏõåÌÅ¨ÌîåÎ°úÏö∞
        expertWorkflow: {
            steps: [
                { name: 'Ï¥àÍ∏∞ ÏÉÅÎã¥', duration: 5, required: true },
                { name: 'Î≤†Ïù¥Ïä§ ÌÖåÏä§Ìä∏', duration: 10, required: true },
                { name: 'ÏÑ∏Î∂Ä ÎìúÎ†àÏù¥Ìïë', duration: 15, required: true },
                { name: 'ÏµúÏ¢Ö ÌôïÏù∏', duration: 5, required: true },
                { name: 'Í≤∞Í≥º ÏÑ§Î™Ö', duration: 10, required: false }
            ],
            totalEstimatedTime: 45,
            minRequiredSteps: 3
        }
    },

    // ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏÑ§Ï†ï
    PERFORMANCE: {
        memory: {
            maxHeapSize: getDeviceType() === 'mobile' ? 50 * 1024 * 1024 : 150 * 1024 * 1024,
            gcThreshold: getDeviceType() === 'mobile' ? 40 * 1024 * 1024 : 120 * 1024 * 1024,
            cacheExpiry: 30 * 60 * 1000,
            imagePoolSize: getDeviceType() === 'mobile' ? 5 : 15,
            workerPoolSize: Math.min(safeNavigatorAccess('hardwareConcurrency', 4), 8)
        },
        
        imageProcessing: {
            maxDimensions: { 
                width: getDeviceType() === 'mobile' ? 1024 : 2048, 
                height: getDeviceType() === 'mobile' ? 1024 : 2048 
            },
            compressionQuality: getDeviceType() === 'mobile' ? 0.7 : 0.8,
            useWebGL: getBrowserInfo().features.webgl,
            useWebAssembly: 'WebAssembly' in window,
            
            parallelProcessing: {
                enabled: safeNavigatorAccess('hardwareConcurrency', 1) > 2,
                maxWorkers: Math.min(safeNavigatorAccess('hardwareConcurrency', 4), 4),
                chunkSize: 1024 * 1024
            }
        },
        
        rendering: {
            targetFPS: getDeviceType() === 'mobile' ? 30 : 60,
            enableVSync: true,
            enableGPUAcceleration: getBrowserInfo().features.webgl,
            
            adaptiveQuality: {
                enabled: true,
                fpsThreshold: 20,
                qualityLevels: ['low', 'medium', 'high'],
                autoAdjust: true
            }
        }
    },

    // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå ÏÑ§Ï†ï
    STORAGE: {
        localStorage: {
            enabled: !!window.localStorage,
            prefix: 'pca_',
            maxSize: 10 * 1024 * 1024,
            compression: true,
            retention: 90 * 24 * 60 * 60 * 1000
        },
        
        indexedDB: {
            enabled: getBrowserInfo().features.indexedDB,
            dbName: 'PersonalColorDB',
            version: 1,
            
            stores: {
                customers: { 
                    keyPath: 'id', 
                    autoIncrement: true,
                    indexes: ['name', 'phone', 'email', 'visitDate']
                },
                diagnoses: { 
                    keyPath: 'id', 
                    autoIncrement: true,
                    indexes: ['customerId', 'date', 'season', 'confidence']
                },
                reports: { 
                    keyPath: 'id', 
                    autoIncrement: true,
                    indexes: ['customerId', 'diagnosisId', 'createdAt']
                },
                images: { 
                    keyPath: 'id', 
                    autoIncrement: true,
                    indexes: ['diagnosisId', 'type', 'timestamp']
                }
            }
        }
    },

    // UI ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≤ÑÏ†Ñ)
    UI: {
        theme: {
            default: 'professional',
            available: ['professional', 'elegant', 'modern', 'classic'],
            darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,
            
            customColors: {
                primary: '#6366f1',
                primaryDark: '#4f46e5',
                secondary: '#ec4899',
                accent: '#f59e0b',
                success: '#10b981',
                warning: '#f59e0b',
                error: '#ef4444'
            }
        },
        
        layout: {
            breakpoints: {
                xs: '480px',
                sm: '640px',
                md: '768px',
                lg: '1024px',
                xl: '1280px'
            },
            
            headerHeight: getDeviceType() === 'mobile' ? '60px' : '80px',
            sidebarWidth: '320px',
            contentPadding: '24px',
            
            zIndex: {
                dropdown: 1000,
                modal: 1050,
                tooltip: 1070,
                toast: 1080
            }
        },
        
        animations: {
            enabled: !window.matchMedia('(prefers-reduced-motion: reduce)').matches,
            duration: getDeviceType() === 'mobile' ? 200 : 300,
            easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)'
        },
        
        accessibility: {
            screenReader: true,
            keyboardNavigation: true,
            focusIndicators: true,
            contrastRatio: 4.5,
            
            fontSize: {
                min: '14px',
                default: '16px',
                max: '24px'
            }
        },
        
        touch: {
            enabled: getDeviceType() !== 'desktop',
            minTouchTarget: '44px',
            swipeThreshold: 100,
            longPressDelay: 500,
            hapticFeedback: 'vibrate' in navigator
        }
    },

    // üåê Íµ≠Ï†úÌôî ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≥µÏõê)
    I18N: {
        defaultLanguage: 'ko',
        supportedLanguages: ['ko', 'en', 'ja', 'zh-CN'],
        fallbackLanguage: 'en',
        
        detection: {
            order: ['localStorage', 'navigator', 'htmlTag'],
            caches: ['localStorage'],
            lookupLocalStorage: 'i18nextLng'
        },
        
        loading: {
            lazy: true,
            preload: ['ko'],
            loadPath: '/locales/{{lng}}/{{ns}}.json'
        },
        
        namespaces: {
            default: 'common',
            available: ['common', 'diagnosis', 'report', 'customer', 'settings', 'errors']
        },
        
        formatting: {
            currency: {
                ko: 'KRW',
                en: 'USD',
                ja: 'JPY',
                'zh-CN': 'CNY'
            },
            dateFormat: {
                ko: 'YYYY-MM-DD',
                en: 'MM/DD/YYYY',
                ja: 'YYYY/MM/DD',
                'zh-CN': 'YYYY-MM-DD'
            }
        },
        
        localeSettings: {
            ko: { name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑', rtl: false },
            en: { name: 'English', flag: 'üá∫üá∏', rtl: false },
            ja: { name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', rtl: false },
            'zh-CN': { name: 'ÁÆÄ‰Ωì‰∏≠Êñá', flag: 'üá®üá≥', rtl: false }
        }
    },

    // üìä Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≥µÏõê)
    REPORTS: {
        templates: {
            standard: {
                name: 'ÌëúÏ§Ä ÏßÑÎã® Î≥¥Í≥†ÏÑú',
                sections: ['customer', 'diagnosis', 'recommendations', 'colors'],
                pageSize: 'A4',
                orientation: 'portrait'
            },
            detailed: {
                name: 'ÏÉÅÏÑ∏ ÏßÑÎã® Î≥¥Í≥†ÏÑú',
                sections: ['customer', 'diagnosis', 'analysis', 'recommendations', 'colors', 'styling'],
                pageSize: 'A4',
                orientation: 'portrait'
            },
            summary: {
                name: 'ÏöîÏïΩ Î≥¥Í≥†ÏÑú',
                sections: ['diagnosis', 'recommendations'],
                pageSize: 'A5',
                orientation: 'portrait'
            }
        },
        
        pdf: {
            engine: 'jsPDF',
            quality: 1.0,
            dpi: 300,
            format: 'A4',
            margins: { top: 20, right: 20, bottom: 20, left: 20 },
            
            fonts: {
                korean: 'NotoSansKR',
                english: 'Roboto',
                fallback: 'Arial'
            },
            
            images: {
                format: 'JPEG',
                quality: 0.8,
                maxWidth: 500,
                maxHeight: 500
            }
        },
        
        colorPalette: {
            swatchSize: 40,
            swatchesPerRow: 6,
            showHexValues: true,
            showColorNames: true,
            groupByCategory: true
        },
        
        branding: {
            logo: '/assets/images/logo.png',
            companyName: 'Personal Color Pro',
            website: 'www.personalcolorpro.com',
            footer: 'Professional Personal Color Analysis'
        }
    },

    // üë• Í≥†Í∞ù Í¥ÄÎ¶¨ ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≥µÏõê)
    CUSTOMER_MANAGEMENT: {
        customerFields: {
            required: ['name', 'phone'],
            optional: ['email', 'age', 'gender', 'skinType', 'hairColor', 'notes'],
            
            validation: {
                name: { minLength: 2, maxLength: 50 },
                phone: { pattern: /^01[0-9]-?[0-9]{3,4}-?[0-9]{4}$/ },
                email: { pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
                age: { min: 15, max: 100 }
            }
        },
        
        search: {
            fields: ['name', 'phone', 'email'],
            fuzzySearch: true,
            searchThreshold: 0.6
        },
        
        sorting: {
            default: 'visitDate_desc',
            options: [
                'name_asc', 'name_desc',
                'visitDate_asc', 'visitDate_desc',
                'diagnosis_asc', 'diagnosis_desc'
            ]
        },
        
        privacy: {
            dataRetention: 365 * 24 * 60 * 60 * 1000,
            anonymization: true,
            exportRestriction: true,
            consentRequired: true
        }
    },

    // üîê Î≥¥Ïïà ÏÑ§Ï†ï (ÏôÑÏ†Ñ Î≥µÏõê)
    SECURITY: {
        dataProtection: {
            enableEncryption: window.location.protocol === 'https:',
            encryptionAlgorithm: 'AES-256-GCM',
            hashAlgorithm: 'SHA-256',
            saltLength: 32
        },
        
        session: {
            timeout: 60 * 60 * 1000,
            extendOnActivity: true,
            multipleDevices: false,
            secureStorage: true
        },
        
        api: {
            rateLimiting: {
                enabled: true,
                maxRequests: 100,
                windowMs: 15 * 60 * 1000
            },
            corsEnabled: true
        },
        
        privacy: {
            gdprCompliance: true,
            dataMinimization: true,
            rightToDelete: true,
            consentManagement: true
        }
    },

    // üêõ ÎîîÎ≤ÑÍπÖ Î∞è Î°úÍπÖ
    DEBUG: {
        enabled: CURRENT_ENVIRONMENT !== 'production',
        verboseLogging: CURRENT_ENVIRONMENT === 'development',
        
        logLevel: {
            development: 'debug',
            staging: 'info',
            production: 'error'
        }[CURRENT_ENVIRONMENT],
        
        performance: {
            enabled: true,
            measureLoadTime: true,
            measureRenderTime: true,
            trackMemoryUsage: CURRENT_ENVIRONMENT === 'development',
            trackFPS: CURRENT_ENVIRONMENT === 'development'
        },
        
        errorReporting: {
            enabled: CURRENT_ENVIRONMENT === 'production',
            captureConsoleErrors: true,
            captureUnhandledRejections: true,
            maxErrors: 50,
            endpoint: '/api/errors'
        }
    }
};

// ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
const validateConfig = () => {
    const config = window.PersonalColorConfig;
    const warnings = [];
    const errors = [];
    
    if (!config.APP_INFO.version) {
        errors.push('APP_INFO.versionÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }
    
    if (!config.CAMERA.constraints) {
        errors.push('CAMERA.constraintsÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }
    
    const features = getBrowserInfo().features;
    
    if (!features.webgl && config.PERFORMANCE.imageProcessing.useWebGL) {
        warnings.push('WebGLÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.');
    }
    
    if (!features.indexedDB && config.STORAGE.indexedDB.enabled) {
        warnings.push('IndexedDBÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.');
        config.STORAGE.indexedDB.enabled = false;
    }
    
    if (!features.webrtc) {
        errors.push('Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî Ïπ¥Î©îÎùºÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
    }
    
    if (errors.length > 0) {
        console.error('‚ùå ÏÑ§Ï†ï Í≤ÄÏ¶ù Ïò§Î•ò:', errors);
    }
    
    if (warnings.length > 0) {
        console.warn('‚ö†Ô∏è ÏÑ§Ï†ï Í≤ÄÏ¶ù Í≤ΩÍ≥†:', warnings);
    }
    
    if (errors.length === 0 && warnings.length === 0) {
        console.log('‚úÖ ÏÑ§Ï†ï Í≤ÄÏ¶ù ÏôÑÎ£å');
    }
    
    return { errors, warnings };
};

// ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Î∞è Í≤ÄÏ¶ù Ïã§Ìñâ
try {
    const validation = validateConfig();
    
    if (CURRENT_ENVIRONMENT === 'development') {
        console.log('üîß Personal Color Pro ÏÑ§Ï†ï:', window.PersonalColorConfig);
        
        window.ConfigUtils = {
            getConfig: () => window.PersonalColorConfig,
            validateConfig,
            getBrowserInfo,
            getDeviceType,
            detectEnvironment,
            
            updateConfig: (path, value) => {
                const pathArray = path.split('.');
                let current = window.PersonalColorConfig;
                
                for (let i = 0; i < pathArray.length - 1; i++) {
                    current = current[pathArray[i]];
                }
                
                current[pathArray[pathArray.length - 1]] = value;
                console.log(`ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏Îê®: ${path} = ${value}`);
            }
        };
        
        console.log('üîß Í∞úÎ∞úÏûê ÎèÑÍµ¨: window.ConfigUtils ÏÇ¨Ïö© Í∞ÄÎä•');
    }
    
    console.log('‚úÖ Personal Color Pro ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å');
    
} catch (error) {
    console.error('‚ùå ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    
    // Ìè¥Î∞± ÏÑ§Ï†ï Ï†úÍ≥µ
    window.PersonalColorConfig = {
        APP_INFO: { version: '1.0.0', environment: 'production' },
        ENVIRONMENT: { current: 'production', isProduction: true },
        API: { baseUrl: '/api/v1', timeout: 30000 },
        DEBUG: { enabled: false, logLevel: 'error' }
    };
    
    console.warn('‚ö†Ô∏è Í∏∞Î≥∏ ÏÑ§Ï†ïÏúºÎ°ú Ìè¥Î∞±Îê®');
}

// üî• Í∏¥Í∏â Ï∂îÍ∞Ä: getConfig Ìï®Ïàò (8Í∞ú ÌååÏùº Î°úÎìú Ïã§Ìå® Ìï¥Í≤∞Ïùò ÌïµÏã¨!)
/**
 * Ï†ÑÏó≠ ÏÑ§Ï†ïÍ∞í Ï†ëÍ∑º Ìï®Ïàò
 * @param {string} keyPath - ÏÑ§Ï†ï ÌÇ§ Í≤ΩÎ°ú (Ïòà: 'CAMERA.constraints', 'AI_MODELS.confidenceThreshold')
 * @param {*} defaultValue - Í∏∞Î≥∏Í∞í
 * @returns {*} ÏÑ§Ï†ïÍ∞í ÎòêÎäî Í∏∞Î≥∏Í∞í
 */
function getConfig(keyPath, defaultValue = null) {
    try {
        if (!window.PersonalColorConfig) {
            console.warn('PersonalColorConfigÍ∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            return defaultValue;
        }

        // ÌÇ§ Í≤ΩÎ°úÎ•º Ï†ê(.)ÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Ï§ëÏ≤©Îêú Í∞ùÏ≤¥Ïóê Ï†ëÍ∑º
        const keys = keyPath.split('.');
        let current = window.PersonalColorConfig;
        
        for (const key of keys) {
            if (current === null || current === undefined || typeof current !== 'object') {
                console.warn(`ÏÑ§Ï†ï Í≤ΩÎ°ú '${keyPath}'ÏóêÏÑú '${key}' Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
                return defaultValue;
            }
            current = current[key];
        }
        
        return current !== undefined ? current : defaultValue;
        
    } catch (error) {
        console.warn(`getConfig Ïò§Î•ò (${keyPath}):`, error);
        return defaultValue;
    }
}

// Ï†ÑÏó≠ÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù Îì±Î°ù
window.getConfig = getConfig;

// üî• Ï∂îÍ∞Ä Ï†ÑÏó≠ Ìï®Ïàò Ï†ïÏùò (Îã§Î•∏ ÌååÏùºÏóêÏÑú Ï∞∏Ï°∞ÌïòÎäî Ìï®ÏàòÎì§)

/**
 * Í∂åÌïú ÌôïÏù∏ Ìï®Ïàò (PhotoAnalysis.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.hasPermission = function(permissionType) {
    try {
        switch (permissionType) {
            case 'camera':
                return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            case 'microphone':
                return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            case 'geolocation':
                return 'geolocation' in navigator;
            case 'storage':
                return 'localStorage' in window && window.localStorage !== null;
            default:
                return false;
        }
    } catch (error) {
        console.warn(`Í∂åÌïú ÌôïÏù∏ Ïã§Ìå® (${permissionType}):`, error);
        return false;
    }
};

/**
 * Î†åÎçîÎßÅ Ìï®Ïàò (VirtualDraping.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.render = function(context, data) {
    try {
        if (!context || !data) {
            console.warn('Î†åÎçîÎßÅ Ìï®Ïàò: ÏûòÎ™ªÎêú Îß§Í∞úÎ≥ÄÏàò');
            return false;
        }
        
        if (context.clearRect) {
            context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        }
        
        if (data.type === 'image' && data.imageData) {
            context.putImageData(data.imageData, 0, 0);
        }
        
        return true;
    } catch (error) {
        console.warn('Î†åÎçîÎßÅ Ìï®Ïàò Ïò§Î•ò:', error);
        return false;
    }
};

/**
 * Í≥ÑÏ†à Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º Ìï®Ïàò (ColorPalette.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.getSeasonData = function(season = null) {
    try {
        const seasonData = window.seasons || window.SEASONS || {
            spring: { name: 'Î¥Ñ', colors: [], description: 'Îî∞ÎúªÌïòÍ≥† Î∞ùÏùÄ ÌÜ§' },
            summer: { name: 'Ïó¨Î¶Ñ', colors: [], description: 'ÏãúÏõêÌïòÍ≥† Î∂ÄÎìúÎü¨Ïö¥ ÌÜ§' },
            autumn: { name: 'Í∞ÄÏùÑ', colors: [], description: 'Îî∞ÎúªÌïòÍ≥† ÍπäÏùÄ ÌÜ§' },
            winter: { name: 'Í≤®Ïö∏', colors: [], description: 'Ï∞®Í∞ëÍ≥† ÏÑ†Î™ÖÌïú ÌÜ§' }
        };
        
        if (season) {
            return seasonData[season] || null;
        }
        
        return seasonData;
    } catch (error) {
        console.warn('Í≥ÑÏ†à Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º Ïò§Î•ò:', error);
        return null;
    }
};

// seasonData Î≥ÑÏπ≠ Îì±Î°ù (ColorPalette.js Ìò∏ÌôòÏÑ±)
window.seasonData = window.getSeasonData();

/**
 * ÏÑ§Ï†ïÍ∞í ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
 */
window.updateConfig = function(path, value) {
    try {
        const pathArray = path.split('.');
        let current = window.PersonalColorConfig;
        
        for (let i = 0; i < pathArray.length - 1; i++) {
            if (!current[pathArray[i]]) {
                current[pathArray[i]] = {};
            }
            current = current[pathArray[i]];
        }
        
        current[pathArray[pathArray.length - 1]] = value;
        console.log(`‚úÖ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏: ${path} = ${value}`);
        return true;
    } catch (error) {
        console.error(`‚ùå ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® (${path}):`, error);
        return false;
    }
};

/**
 * ÏïàÏ†ÑÌïú Ï†ÑÏó≠ Î≥ÄÏàò Ï†ëÍ∑º Ìï®Ïàò
 */
window.safeGlobalAccess = function(varName, defaultValue = null) {
    try {
        return window[varName] !== undefined ? window[varName] : defaultValue;
    } catch (error) {
        console.warn(`Ï†ÑÏó≠ Î≥ÄÏàò '${varName}' Ï†ëÍ∑º Ïã§Ìå®:`, error);
        return defaultValue;
    }
};

// üî• Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóêÏÑú Îπ†ÏßÑ Ï§ëÏöî Î∂ÄÎ∂ÑÎì§ Ï∂îÍ∞Ä

/**
 * PCCS ÌÜ§ Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.pccsTones = {
    // ÏàúÏÉâÌÜ§
    vivid: { lightness: 70, saturation: 100, description: 'ÏÑ†Î™ÖÌïú' },
    bright: { lightness: 80, saturation: 80, description: 'Î∞ùÏùÄ' },
    strong: { lightness: 60, saturation: 90, description: 'Í∞ïÌïú' },
    deep: { lightness: 40, saturation: 85, description: 'ÏßôÏùÄ' },
    
    // Î™ÖÏ≤≠ÌÜ§
    pale: { lightness: 85, saturation: 45, description: 'Ïó∞Ìïú' },
    light: { lightness: 75, saturation: 50, description: 'ÏñïÏùÄ' },
    soft: { lightness: 65, saturation: 40, description: 'Î∂ÄÎìúÎü¨Ïö¥' },
    dull: { lightness: 55, saturation: 35, description: 'ÌÉÅÌïú' },
    dark: { lightness: 35, saturation: 45, description: 'Ïñ¥ÎëêÏö¥' },
    
    // Î¨¥Ï±ÑÏÉâÌÜ§
    lightGray: { lightness: 80, saturation: 5, description: 'Î∞ùÏùÄ ÌöåÏÉâ' },
    mediumGray: { lightness: 50, saturation: 5, description: 'Ï§ëÍ∞Ñ ÌöåÏÉâ' },
    darkGray: { lightness: 25, saturation: 5, description: 'Ïñ¥ÎëêÏö¥ ÌöåÏÉâ' }
};

/**
 * 4Í≥ÑÏ†à ÏÉâÏò®ÎèÑ Í∏∞Ï§ÄÍ∞í (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.seasonalTemperatures = {
    spring: { warm: true, temperature: 'warm', range: [3000, 4000] },
    summer: { warm: false, temperature: 'cool', range: [5500, 6500] },
    autumn: { warm: true, temperature: 'warm', range: [2500, 3500] },
    winter: { warm: false, temperature: 'cool', range: [6000, 8000] }
};

/**
 * ÏÉâÏÉÅÌôò Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.colorWheel = {
    red: { hue: 0, warm: true },
    redOrange: { hue: 30, warm: true },
    orange: { hue: 60, warm: true },
    yellowOrange: { hue: 90, warm: true },
    yellow: { hue: 120, warm: true },
    yellowGreen: { hue: 150, warm: true },
    green: { hue: 180, warm: false },
    blueGreen: { hue: 210, warm: false },
    blue: { hue: 240, warm: false },
    blueViolet: { hue: 270, warm: false },
    violet: { hue: 300, warm: false },
    redViolet: { hue: 330, warm: true }
};

/**
 * CIE ÌëúÏ§Ä Ï°∞Î™ÖÏ≤¥ Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò ÏôÑÏ†ÑÌïú Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.illuminants = {
    D65: { x: 0.31271, y: 0.32902, X: 95.047, Y: 100.000, Z: 108.883 }, // ÌëúÏ§Ä Ï£ºÍ¥ë
    D50: { x: 0.34567, y: 0.35850, X: 96.422, Y: 100.000, Z: 82.521 },  // Ïù∏ÏáÑ ÌëúÏ§Ä
    A: { x: 0.44757, y: 0.40745, X: 109.850, Y: 100.000, Z: 35.585 },    // Î∞±Ïó¥Îì±
    F2: { x: 0.37208, y: 0.37529, X: 99.187, Y: 100.000, Z: 67.393 }     // ÌòïÍ¥ëÎì±
};

/**
 * ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ëÏù∏ Ï°∞Î™ÖÏ≤¥
 */
window.PersonalColorConfig.COLOR_ANALYSIS.currentIlluminant = window.PersonalColorConfig.COLOR_ANALYSIS.illuminants.D65;

/**
 * ÌîºÎ∂Ä ÏÉòÌîåÎßÅÏùÑ ÏúÑÌïú ÏµúÏ†Å ÏòÅÏó≠ (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.skinSamplingAreas = {
    forehead: { x: 0.3, y: 0.15, w: 0.4, h: 0.12 },
    leftCheek: { x: 0.15, y: 0.4, w: 0.15, h: 0.2 },
    rightCheek: { x: 0.7, y: 0.4, w: 0.15, h: 0.2 },
    chin: { x: 0.35, y: 0.75, w: 0.3, h: 0.15 }
};

/**
 * ÌôîÏû•Ìíà Î∏åÎûúÎìú Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞ (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóêÏÑú Ï§ëÏöîÌïú Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.BRAND_MATCHING = {
    makeup: {
        foundation: {
            brands: ['ÏóêÏä§Ìã∞Î°úÎçî', 'ÎûëÏΩ§', 'ÎîîÏò¨', 'ÏÉ§ÎÑ¨', 'Îß•', 'ÌÅ¥Î¶¨ÎãàÌÅ¨'],
            colorMapping: {
                spring: ['21N1', 'NC20', 'W1', 'Beige 10'],
                summer: ['21C1', 'NW20', 'C1', 'Beige Rose 20'],
                autumn: ['23N2', 'NC25', 'W2', 'Beige 30'],
                winter: ['23C2', 'NW25', 'C2', 'Beige Rose 30']
            }
        },
        lipstick: {
            brands: ['ÏÉ§ÎÑ¨', 'ÎîîÏò¨', 'ÌÜ∞Ìè¨Îìú', 'YSL', 'Îß•'],
            recommendations: {
                spring: ['ÏΩîÎûÑ', 'ÌîºÏπò', 'Ïò§Î†åÏßÄÎ†àÎìú'],
                summer: ['Î°úÏ¶à', 'Î≤†Î¶¨', 'ÌîåÎüº'],
                autumn: ['Î∏åÎ¶≠Î†àÎìú', 'ÌÖåÎùºÏΩîÌÉÄ', 'Î∏åÎ°†Ï¶à'],
                winter: ['Ìä∏Î£®Î†àÎìú', 'Îî•Î≤†Î¶¨', 'Ìì®ÏÉ§']
            }
        }
    },
    hairColor: {
        brands: ['Ïõ∞Îùº', 'Î°úÎ†àÏïå', 'ÏäàÎ∞îÎ•¥Ï∏†ÏΩîÌîÑ', 'Îß§Ìä∏Î¶≠Ïä§'],
        recommendations: {
            spring: ['Í≥®Îì†Î∏åÎùºÏö¥', 'Ïπ¥ÎùºÎ©ú', 'ÌóàÎãàÎ∏îÎ°†Îìú'],
            summer: ['Ïï†Ïâ¨Î∏åÎùºÏö¥', 'ÌîåÎûòÌã∞ÎÑòÎ∏îÎ°†Îìú', 'Ïã§Î≤ÑÍ∑∏Î†àÏù¥'],
            autumn: ['Ï¥àÏΩúÎ¶øÎ∏åÎùºÏö¥', 'Î†àÎìúÎ∏åÎùºÏö¥', 'Îî•Î∏åÎü∞Ìä∏'],
            winter: ['Ï†úÌä∏Î∏îÎûô', 'Îã§ÌÅ¨Î∏åÎùºÏö¥', 'Ïù∏ÌÖêÏä§Î†àÎìú']
        }
    }
};

// üî• ÏΩòÏÜîÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•Ìïú ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥
if (CURRENT_ENVIRONMENT === 'development') {
    console.log('üöÄ Ï†ÑÏó≠ Ìï®Ïàò Îì±Î°ù ÏôÑÎ£å:');
    console.log('  - getConfig()');
    console.log('  - hasPermission()');
    console.log('  - render()');
    console.log('  - getSeasonData()');
    console.log('  - updateConfig()');
    console.log('  - safeGlobalAccess()');
    console.log('');
    console.log('üí° ÏÇ¨Ïö©Î≤ï:');
    console.log('  getConfig("DRAPING.colorSets.spring")');
    console.log('  hasPermission("camera")');
    console.log('  getSeasonData("spring")');
}

console.log('üî• ÏôÑÏ†ÑÌïú config.js Î°úÎìú ÏôÑÎ£å - Í∏∞Ï°¥ Î≤ÑÏ†Ñ Î™®Îì† Í∏∞Îä• ÏôÑÎ≤Ω Î≥µÏõê!');

// üî• Ï∂îÍ∞Ä Ï†ÑÏó≠ Ìï®Ïàò Ï†ïÏùò (Îã§Î•∏ ÌååÏùºÏóêÏÑú Ï∞∏Ï°∞ÌïòÎäî Ìï®ÏàòÎì§)

/**
 * Í∂åÌïú ÌôïÏù∏ Ìï®Ïàò (PhotoAnalysis.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.hasPermission = function(permissionType) {
    try {
        switch (permissionType) {
            case 'camera':
                return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            case 'microphone':
                return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            case 'geolocation':
                return 'geolocation' in navigator;
            case 'storage':
                return 'localStorage' in window && window.localStorage !== null;
            default:
                return false;
        }
    } catch (error) {
        console.warn(`Í∂åÌïú ÌôïÏù∏ Ïã§Ìå® (${permissionType}):`, error);
        return false;
    }
};

/**
 * Î†åÎçîÎßÅ Ìï®Ïàò (VirtualDraping.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.render = function(context, data) {
    try {
        if (!context || !data) {
            console.warn('Î†åÎçîÎßÅ Ìï®Ïàò: ÏûòÎ™ªÎêú Îß§Í∞úÎ≥ÄÏàò');
            return false;
        }
        
        if (context.clearRect) {
            context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        }
        
        if (data.type === 'image' && data.imageData) {
            context.putImageData(data.imageData, 0, 0);
        }
        
        return true;
    } catch (error) {
        console.warn('Î†åÎçîÎßÅ Ìï®Ïàò Ïò§Î•ò:', error);
        return false;
    }
};

/**
 * Í≥ÑÏ†à Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º Ìï®Ïàò (ColorPalette.jsÏóêÏÑú ÏÇ¨Ïö©)
 */
window.getSeasonData = function(season = null) {
    try {
        const seasonData = window.seasons || window.SEASONS || {
            spring: { name: 'Î¥Ñ', colors: [], description: 'Îî∞ÎúªÌïòÍ≥† Î∞ùÏùÄ ÌÜ§' },
            summer: { name: 'Ïó¨Î¶Ñ', colors: [], description: 'ÏãúÏõêÌïòÍ≥† Î∂ÄÎìúÎü¨Ïö¥ ÌÜ§' },
            autumn: { name: 'Í∞ÄÏùÑ', colors: [], description: 'Îî∞ÎúªÌïòÍ≥† ÍπäÏùÄ ÌÜ§' },
            winter: { name: 'Í≤®Ïö∏', colors: [], description: 'Ï∞®Í∞ëÍ≥† ÏÑ†Î™ÖÌïú ÌÜ§' }
        };
        
        if (season) {
            return seasonData[season] || null;
        }
        
        return seasonData;
    } catch (error) {
        console.warn('Í≥ÑÏ†à Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º Ïò§Î•ò:', error);
        return null;
    }
};

// seasonData Î≥ÑÏπ≠ Îì±Î°ù (ColorPalette.js Ìò∏ÌôòÏÑ±)
window.seasonData = window.getSeasonData();

/**
 * ÏÑ§Ï†ïÍ∞í ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
 */
window.updateConfig = function(path, value) {
    try {
        const pathArray = path.split('.');
        let current = window.PersonalColorConfig;
        
        for (let i = 0; i < pathArray.length - 1; i++) {
            if (!current[pathArray[i]]) {
                current[pathArray[i]] = {};
            }
            current = current[pathArray[i]];
        }
        
        current[pathArray[pathArray.length - 1]] = value;
        console.log(`‚úÖ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏: ${path} = ${value}`);
        return true;
    } catch (error) {
        console.error(`‚ùå ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® (${path}):`, error);
        return false;
    }
};

/**
 * ÏïàÏ†ÑÌïú Ï†ÑÏó≠ Î≥ÄÏàò Ï†ëÍ∑º Ìï®Ïàò
 */
window.safeGlobalAccess = function(varName, defaultValue = null) {
    try {
        return window[varName] !== undefined ? window[varName] : defaultValue;
    } catch (error) {
        console.warn(`Ï†ÑÏó≠ Î≥ÄÏàò '${varName}' Ï†ëÍ∑º Ïã§Ìå®:`, error);
        return defaultValue;
    }
};

// üî• ÏΩòÏÜîÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•Ìïú ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥
if (CURRENT_ENVIRONMENT === 'development') {
    console.log('üöÄ Ï†ÑÏó≠ Ìï®Ïàò Îì±Î°ù ÏôÑÎ£å:');
    console.log('  - getConfig()');
    console.log('  - hasPermission()');
    console.log('  - render()');
    console.log('  - getSeasonData()');
    console.log('  - updateConfig()');
    console.log('  - safeGlobalAccess()');
    console.log('');
    console.log('üí° ÏÇ¨Ïö©Î≤ï:');
    console.log('  getConfig("DRAPING.colorSets.spring")');
    console.log('  hasPermission("camera")');
    console.log('  getSeasonData("spring")');
}

// üî• Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóêÏÑú Îπ†ÏßÑ Ï§ëÏöî Î∂ÄÎ∂ÑÎì§ Ï∂îÍ∞Ä

/**
 * PCCS ÌÜ§ Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.pccsTones = {
    // ÏàúÏÉâÌÜ§
    vivid: { lightness: 70, saturation: 100, description: 'ÏÑ†Î™ÖÌïú' },
    bright: { lightness: 80, saturation: 80, description: 'Î∞ùÏùÄ' },
    strong: { lightness: 60, saturation: 90, description: 'Í∞ïÌïú' },
    deep: { lightness: 40, saturation: 85, description: 'ÏßôÏùÄ' },
    
    // Î™ÖÏ≤≠ÌÜ§
    pale: { lightness: 85, saturation: 45, description: 'Ïó∞Ìïú' },
    light: { lightness: 75, saturation: 50, description: 'ÏñïÏùÄ' },
    soft: { lightness: 65, saturation: 40, description: 'Î∂ÄÎìúÎü¨Ïö¥' },
    dull: { lightness: 55, saturation: 35, description: 'ÌÉÅÌïú' },
    dark: { lightness: 35, saturation: 45, description: 'Ïñ¥ÎëêÏö¥' },
    
    // Î¨¥Ï±ÑÏÉâÌÜ§
    lightGray: { lightness: 80, saturation: 5, description: 'Î∞ùÏùÄ ÌöåÏÉâ' },
    mediumGray: { lightness: 50, saturation: 5, description: 'Ï§ëÍ∞Ñ ÌöåÏÉâ' },
    darkGray: { lightness: 25, saturation: 5, description: 'Ïñ¥ÎëêÏö¥ ÌöåÏÉâ' }
};

/**
 * 4Í≥ÑÏ†à ÏÉâÏò®ÎèÑ Í∏∞Ï§ÄÍ∞í (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.seasonalTemperatures = {
    spring: { warm: true, temperature: 'warm', range: [3000, 4000] },
    summer: { warm: false, temperature: 'cool', range: [5500, 6500] },
    autumn: { warm: true, temperature: 'warm', range: [2500, 3500] },
    winter: { warm: false, temperature: 'cool', range: [6000, 8000] }
};

/**
 * ÏÉâÏÉÅÌôò Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.colorWheel = {
    red: { hue: 0, warm: true },
    redOrange: { hue: 30, warm: true },
    orange: { hue: 60, warm: true },
    yellowOrange: { hue: 90, warm: true },
    yellow: { hue: 120, warm: true },
    yellowGreen: { hue: 150, warm: true },
    green: { hue: 180, warm: false },
    blueGreen: { hue: 210, warm: false },
    blue: { hue: 240, warm: false },
    blueViolet: { hue: 270, warm: false },
    violet: { hue: 300, warm: false },
    redViolet: { hue: 330, warm: true }
};

/**
 * CIE ÌëúÏ§Ä Ï°∞Î™ÖÏ≤¥ Ï†ïÏùò (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò ÏôÑÏ†ÑÌïú Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.illuminants = {
    D65: { x: 0.31271, y: 0.32902, X: 95.047, Y: 100.000, Z: 108.883 }, // ÌëúÏ§Ä Ï£ºÍ¥ë
    D50: { x: 0.34567, y: 0.35850, X: 96.422, Y: 100.000, Z: 82.521 },  // Ïù∏ÏáÑ ÌëúÏ§Ä
    A: { x: 0.44757, y: 0.40745, X: 109.850, Y: 100.000, Z: 35.585 },    // Î∞±Ïó¥Îì±
    F2: { x: 0.37208, y: 0.37529, X: 99.187, Y: 100.000, Z: 67.393 }     // ÌòïÍ¥ëÎì±
};

/**
 * ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ëÏù∏ Ï°∞Î™ÖÏ≤¥
 */
window.PersonalColorConfig.COLOR_ANALYSIS.currentIlluminant = window.PersonalColorConfig.COLOR_ANALYSIS.illuminants.D65;

/**
 * ÌîºÎ∂Ä ÏÉòÌîåÎßÅÏùÑ ÏúÑÌïú ÏµúÏ†Å ÏòÅÏó≠ (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóê ÏûàÎçò Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.COLOR_ANALYSIS.skinSamplingAreas = {
    forehead: { x: 0.3, y: 0.15, w: 0.4, h: 0.12 },
    leftCheek: { x: 0.15, y: 0.4, w: 0.15, h: 0.2 },
    rightCheek: { x: 0.7, y: 0.4, w: 0.15, h: 0.2 },
    chin: { x: 0.35, y: 0.75, w: 0.3, h: 0.15 }
};

/**
 * ÌôîÏû•Ìíà Î∏åÎûúÎìú Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞ (Í∏∞Ï°¥ Î≤ÑÏ†ÑÏóêÏÑú Ï§ëÏöîÌïú Î∂ÄÎ∂Ñ)
 */
window.PersonalColorConfig.BRAND_MATCHING = {
    makeup: {
        foundation: {
            brands: ['ÏóêÏä§Ìã∞Î°úÎçî', 'ÎûëÏΩ§', 'ÎîîÏò¨', 'ÏÉ§ÎÑ¨', 'Îß•', 'ÌÅ¥Î¶¨ÎãàÌÅ¨'],
            colorMapping: {
                spring: ['21N1', 'NC20', 'W1', 'Beige 10'],
                summer: ['21C1', 'NW20', 'C1', 'Beige Rose 20'],
                autumn: ['23N2', 'NC25', 'W2', 'Beige 30'],
                winter: ['23C2', 'NW25', 'C2', 'Beige Rose 30']
            }
        },
        lipstick: {
            brands: ['ÏÉ§ÎÑ¨', 'ÎîîÏò¨', 'ÌÜ∞Ìè¨Îìú', 'YSL', 'Îß•'],
            recommendations: {
                spring: ['ÏΩîÎûÑ', 'ÌîºÏπò', 'Ïò§Î†åÏßÄÎ†àÎìú'],
                summer: ['Î°úÏ¶à', 'Î≤†Î¶¨', 'ÌîåÎüº'],
                autumn: ['Î∏åÎ¶≠Î†àÎìú', 'ÌÖåÎùºÏΩîÌÉÄ', 'Î∏åÎ°†Ï¶à'],
                winter: ['Ìä∏Î£®Î†àÎìú', 'Îî•Î≤†Î¶¨', 'Ìì®ÏÉ§']
            }
        }
    },
    hairColor: {
        brands: ['Ïõ∞Îùº', 'Î°úÎ†àÏïå', 'ÏäàÎ∞îÎ•¥Ï∏†ÏΩîÌîÑ', 'Îß§Ìä∏Î¶≠Ïä§'],
        recommendations: {
            spring: ['Í≥®Îì†Î∏åÎùºÏö¥', 'Ïπ¥ÎùºÎ©ú', 'ÌóàÎãàÎ∏îÎ°†Îìú'],
            summer: ['Ïï†Ïâ¨Î∏åÎùºÏö¥', 'ÌîåÎûòÌã∞ÎÑòÎ∏îÎ°†Îìú', 'Ïã§Î≤ÑÍ∑∏Î†àÏù¥'],
            autumn: ['Ï¥àÏΩúÎ¶øÎ∏åÎùºÏö¥', 'Î†àÎìúÎ∏åÎùºÏö¥', 'Îî•Î∏åÎü∞Ìä∏'],
            winter: ['Ï†úÌä∏Î∏îÎûô', 'Îã§ÌÅ¨Î∏åÎùºÏö¥', 'Ïù∏ÌÖêÏä§Î†àÎìú']
        }
    }
};

console.log('üî• ÏôÑÏ†ÑÌïú config.js Î°úÎìú ÏôÑÎ£å - Í∏∞Ï°¥ Î≤ÑÏ†Ñ Î™®Îì† Í∏∞Îä• ÏôÑÎ≤Ω Î≥µÏõê!');
